# TASM自举编译器 - compiler0.tasm
# 最小化实现,用于编译compiler1.tasm

.section .data
    # 常量定义
    # Windows常量
    STD_ERROR_HANDLE: equ -12
    CREATE_ALWAYS: equ 2
    
    # Token类型
    TOKEN_NONE: equ 0
    TOKEN_INST: equ 1
    TOKEN_REG: equ 2
    TOKEN_NUM: equ 3
    TOKEN_LABEL: equ 4
    TOKEN_SYM: equ 5
    
    # PE文件常量
    IMAGE_DOS_SIGNATURE: equ 0x5A4D      # MZ
    IMAGE_NT_SIGNATURE: equ 0x00004550   # PE00
    IMAGE_FILE_MACHINE_AMD64: equ 0x8664
    IMAGE_FILE_EXECUTABLE_IMAGE: equ 0x0002
    IMAGE_FILE_RELOCS_STRIPPED: equ 0x0001
    IMAGE_SUBSYSTEM_WINDOWS_CUI: equ 0x0003
    IMAGE_SCN_CNT_CODE: equ 0x00000020
    IMAGE_SCN_MEM_EXECUTE: equ 0x20000000
    IMAGE_SCN_MEM_READ: equ 0x40000000
    
    # 错误消息
    ERR_TOKEN: db "词法错误", 0
    ERR_SYNTAX: db "语法错误", 0
    ERR_FILE: db "文件错误", 0
    ERR_USAGE: db "用法: compiler0 <input.tasm> <output.exe>", 0
    ERR_COMPILE: db "编译错误", 0
    ERR_UNKNOWN_INST: db "未知指令", 0
    ERR_OPERAND: db "不支持的操作数类型", 0
    
    # 指令表
    instructions:
        db "mov", 0
        db "add", 0
        db "sub", 0
        db "push", 0
        db "pop", 0
        db "call", 0
        db "ret", 0
        db "jmp", 0
        db "je", 0
        db "jne", 0
        db "jz", 0
        db "jnz", 0
        db 0  # 表结束
    
    # 寄存器表
    registers:
        db "rax", 0
        db "rbx", 0
        db "rcx", 0
        db "rdx", 0
        db "rsi", 0
        db "rdi", 0
        db "rbp", 0
        db "rsp", 0
        db "r8", 0
        db "r9", 0
        db "r10", 0
        db "r11", 0
        db "r12", 0
        db "r13", 0
        db "r14", 0
        db "r15", 0
        db 0  # 表结束
    
    # PE文件头
    dos_header:
        # DOS头
        dw IMAGE_DOS_SIGNATURE   # e_magic
        times 58 db 0           # 其他DOS头字段
        dd pe_header - dos_header # e_lfanew
    
    pe_header:
        # PE头
        dd IMAGE_NT_SIGNATURE    # Signature
        
        # 文件头
        dw IMAGE_FILE_MACHINE_AMD64  # Machine
        dw 1                    # NumberOfSections
        dd 0                    # TimeDateStamp
        dd 0                    # PointerToSymbolTable
        dd 0                    # NumberOfSymbols
        dw optional_header_size # SizeOfOptionalHeader
        dw IMAGE_FILE_EXECUTABLE_IMAGE | IMAGE_FILE_RELOCS_STRIPPED # Characteristics
    
    optional_header:
        # 可选头
        dw 0x020B              # Magic (PE32+)
        db 0                   # MajorLinkerVersion
        db 0                   # MinorLinkerVersion
        dd 0                   # SizeOfCode
        dd 0                   # SizeOfInitializedData
        dd 0                   # SizeOfUninitializedData
        dd entry_point - dos_header # AddressOfEntryPoint
        dd code_section - dos_header # BaseOfCode
        
        # PE32+特定字段
        dq 0x400000           # ImageBase
        dd 0x1000             # SectionAlignment
        dd 0x200              # FileAlignment
        dw 6                  # MajorOperatingSystemVersion
        dw 0                  # MinorOperatingSystemVersion
        dw 0                  # MajorImageVersion
        dw 0                  # MinorImageVersion
        dw 6                  # MajorSubsystemVersion
        dw 0                  # MinorSubsystemVersion
        dd 0                  # Win32VersionValue
        dd file_size          # SizeOfImage
        dd headers_size       # SizeOfHeaders
        dd 0                  # CheckSum
        dw IMAGE_SUBSYSTEM_WINDOWS_CUI # Subsystem
        dw 0                  # DllCharacteristics
        dq 0x100000          # SizeOfStackReserve
        dq 0x1000            # SizeOfStackCommit
        dq 0x100000          # SizeOfHeapReserve
        dq 0x1000            # SizeOfHeapCommit
        dd 0                  # LoaderFlags
        dd 16                 # NumberOfRvaAndSizes
        
        # 数据目录
        times 16 dq 0
    
    section_header:
        # 节头
        db ".text", 0, 0, 0   # Name
        dd code_size          # VirtualSize
        dd code_section - dos_header # VirtualAddress
        dd code_size          # SizeOfRawData
        dd code_section - dos_header # PointerToRawData
        dd 0                  # PointerToRelocations
        dd 0                  # PointerToLinenumbers
        dw 0                  # NumberOfRelocations
        dw 0                  # NumberOfLinenumbers
        dd IMAGE_SCN_CNT_CODE | IMAGE_SCN_MEM_EXECUTE | IMAGE_SCN_MEM_READ # Characteristics
    
    # 导入表
    import_directory:
        # kernel32.dll
        dd import_lookup_kernel32 - dos_header  # OriginalFirstThunk
        dd 0                                    # TimeDateStamp
        dd 0                                    # ForwarderChain
        dd import_name_kernel32 - dos_header    # Name
        dd import_address_kernel32 - dos_header # FirstThunk
        
        # 结束标记
        times 20 db 0
    
    # kernel32.dll导入查找表
    import_lookup_kernel32:
        dq import_hint_CreateFile - dos_header
        dq import_hint_WriteFile - dos_header
        dq import_hint_ReadFile - dos_header
        dq import_hint_CloseHandle - dos_header
        dq import_hint_GetStdHandle - dos_header
        dq 0  # 结束标记
    
    # kernel32.dll导入地址表
    import_address_kernel32:
        CreateFile: dq 0
        WriteFile: dq 0
        ReadFile: dq 0
        CloseHandle: dq 0
        GetStdHandle: dq 0
    
    # 导入名称
    import_name_kernel32:
        db "KERNEL32.DLL", 0
    
    # 导入函数提示
    import_hint_CreateFile:
        dw 0  # Hint
        db "CreateFileA", 0
    import_hint_WriteFile:
        dw 0
        db "WriteFile", 0
    import_hint_ReadFile:
        dw 0
        db "ReadFile", 0
    import_hint_CloseHandle:
        dw 0
        db "CloseHandle", 0
    import_hint_GetStdHandle:
        dw 0
        db "GetStdHandle", 0
    
    # 重定位表
    reloc_directory:
        # 基址重定位块
        dd code_section - dos_header  # VirtualAddress
        dd reloc_block_size          # SizeOfBlock
        
        # 重定位项
        reloc_entries: times 1024 dw 0
        reloc_count: dq 0
    
    # 计算各种大小
    reloc_block_size: equ $ - reloc_directory
    optional_header_size: equ $ - optional_header
    headers_size: equ section_header + 40 - dos_header
    code_size: equ 0x1000     # 代码节大小(4KB)
    file_size: equ headers_size + code_size
    import_directory_size: equ $ - import_directory
    
    # 编译器状态
    input_file: dq 0
    output_file: dq 0
    input_handle: dq 0
    output_handle: dq 0
    bytes_read: dq 0
    bytes_written: dq 0
    newline: db 13, 10
    
    # 词法分析器状态
    current_char: db 0
    token_buffer: times 256 db 0
    token_len: dq 0
    token_type: dq 0
    token_value: dq 0
    
    # 代码生成
    code_buffer: times 1024 db 0
    code_offset: dq 0
    
    # 标签表
    label_table: times 1024 dq 0
    label_count: dq 0
    
    # 重定位表
    reloc_table: times 1024 dq 0
    reloc_count: dq 0

.section .text
    # 入口点
    entry_point:
        push rbp
        mov rbp, rsp
        
        # 检查命令行参数
        cmp qword [rcx], 3    # 需要2个参数
        jne .usage_error
        
        # 保存参数
        mov rdi, [rdx + 8]    # 输入文件名
        mov [input_file], rdi
        mov rdi, [rdx + 16]   # 输出文件名
        mov [output_file], rdi
        
        # 打开输入文件
        mov rdi, [input_file]
        call open_input_file
        test rax, rax
        jnz .error
        
        # 打开输出文件
        mov rdi, [output_file]
        call open_output_file
        test rax, rax
        jnz .error
        
        # 初始化编译器状态
        call init_compiler
        test rax, rax
        jnz .error
        
        # 编译循环
        .compile_loop:
            # 解析语句
            call parse_statement
            test rax, rax
            jnz .error
            
            # 检查是否到达文件末尾
            call check_eof
            test rax, rax
            jz .compile_loop
            
            # 处理未解析的标签引用
            call resolve_labels
            test rax, rax
            jnz .error
            
            # 更新PE头信息
            call update_pe_headers
            call update_import_table
            call update_reloc_table
            
            # 输出PE文件
            call write_pe_file
            test rax, rax
            jnz .error
            
            # 关闭文件
            call close_files
            
            # 成功退出
            xor rax, rax
            jmp .exit
        
        .usage_error:
            # 显示用法信息
            lea rdi, [ERR_USAGE]
            call print_error
            mov rax, 1
            jmp .exit
        
        .error:
            # 显示错误信息
            lea rdi, [ERR_COMPILE]
            call print_error
            mov rax, 1
        
        .exit:
            leave
            ret
    
    # PE文件输出函数
    write_pe_file:
        push rbp
        mov rbp, rsp
        
        # 写入DOS头
        lea rdi, [dos_header]
        mov rsi, headers_size
        call write_file
        test rax, rax
        jnz .error
        
        # 写入代码节
        lea rdi, [code_buffer]
        mov rsi, [code_offset]
        call write_file
        test rax, rax
        jnz .error
        
        # 填充到节大小
        mov rcx, code_size
        sub rcx, [code_offset]
        jle .done
        
    .pad_loop:
        xor rax, rax
        call emit_byte
        loop .pad_loop
        
    .done:
        xor rax, rax
        jmp .exit
        
    .error:
        mov rax, 1
        
    .exit:
        leave
        ret
    
    # 更新PE头信息
    update_pe_headers:
        push rbp
        mov rbp, rsp
        
        # 更新代码大小
        mov rax, [code_offset]
        mov [optional_header + 20], eax  # SizeOfCode
        
        # 更新入口点
        mov rax, entry_point - dos_header
        mov [optional_header + 40], eax  # AddressOfEntryPoint
        
        # 更新基址
        mov rax, code_section - dos_header
        mov [optional_header + 44], eax  # BaseOfCode
        
        # 更新节大小
        mov rax, [code_offset]
        mov [section_header + 8], eax   # VirtualSize
        mov [section_header + 16], eax  # SizeOfRawData
        
        leave
        ret
    
    # 添加重定位项
    add_relocation:
        push rbp
        mov rbp, rsp
        
        # rdi = 重定位地址
        # rsi = 重定位类型
        
        # 计算相对地址
        sub rdi, code_section
        
        # 构造重定位项
        mov rax, rdi
        and rax, 0xFFF  # 页内偏移
        or rax, rsi     # 添加类型
        
        # 保存重定位项
        mov rcx, [reloc_count]
        mov [reloc_entries + rcx * 2], ax
        inc qword [reloc_count]
        
        leave
        ret
    
    # 更新导入表
    update_import_table:
        push rbp
        mov rbp, rsp
        
        # 更新数据目录
        mov rax, import_directory - dos_header
        mov [optional_header + 8 * 1], rax     # Import Directory RVA
        mov rax, import_directory_size
        mov [optional_header + 8 * 1 + 4], rax # Import Directory Size
        
        leave
        ret
    
    # 更新重定位表
    update_reloc_table:
        push rbp
        mov rbp, rsp
        
        # 更新数据目录
        mov rax, reloc_directory - dos_header
        mov [optional_header + 8 * 5], rax     # BaseReloc Directory RVA
        mov rax, reloc_block_size
        mov [optional_header + 8 * 5 + 4], rax # BaseReloc Directory Size
        
        leave
        ret

# 打开输入文件
open_input_file:
    push rbp
    mov rbp, rsp
    
    # rdi = 文件名
    
    # 打开文件
    mov rcx, rdi          # lpFileName
    xor rdx, rdx         # dwDesiredAccess = GENERIC_READ
    xor r8, r8           # dwShareMode = 0
    xor r9, r9           # lpSecurityAttributes = NULL
    push 3               # dwCreationDisposition = OPEN_EXISTING
    push 0x80           # dwFlagsAndAttributes = FILE_ATTRIBUTE_NORMAL
    push 0              # hTemplateFile = NULL
    call [CreateFile]
    add rsp, 24
    
    # 检查错误
    cmp rax, -1
    je .error
    
    # 保存文件句柄
    mov [input_handle], rax
    xor rax, rax
    jmp .exit
    
.error:
    mov rax, 1
    
.exit:
    leave
    ret

# 打开输出文件
open_output_file:
    push rbp
    mov rbp, rsp
    
    # rdi = 文件名
    
    # 打开文件
    mov rcx, rdi          # lpFileName
    mov rdx, 0xC0000000  # dwDesiredAccess = GENERIC_READ | GENERIC_WRITE
    xor r8, r8           # dwShareMode = 0
    xor r9, r9           # lpSecurityAttributes = NULL
    push CREATE_ALWAYS   # dwCreationDisposition
    push 0x80           # dwFlagsAndAttributes = FILE_ATTRIBUTE_NORMAL
    push 0              # hTemplateFile = NULL
    call [CreateFile]
    add rsp, 24
    
    # 检查错误
    cmp rax, -1
    je .error
    
    # 保存文件句柄
    mov [output_handle], rax
    xor rax, rax
    jmp .exit
    
.error:
    mov rax, 1
    
.exit:
    leave
    ret

# 关闭文件
close_files:
    push rbp
    mov rbp, rsp
    
    # 关闭输入文件
    mov rcx, [input_handle]
    call [CloseHandle]
    
    # 关闭输出文件
    mov rcx, [output_handle]
    call [CloseHandle]
    
    leave
    ret

# 读取文件
read_file:
    push rbp
    mov rbp, rsp
    
    # rdi = 缓冲区
    # rsi = 大小
    
    # 读取文件
    mov rcx, [input_handle]  # hFile
    mov rdx, rdi            # lpBuffer
    mov r8, rsi             # nNumberOfBytesToRead
    lea r9, [bytes_read]    # lpNumberOfBytesRead
    push 0                  # lpOverlapped = NULL
    call [ReadFile]
    add rsp, 8
    
    # 检查错误
    test rax, rax
    jz .error
    
    # 返回读取的字节数
    mov rax, [bytes_read]
    jmp .exit
    
.error:
    mov rax, -1
    
.exit:
    leave
    ret

# 写入文件
write_file:
    push rbp
    mov rbp, rsp
    
    # rdi = 缓冲区
    # rsi = 大小
    
    # 写入文件
    mov rcx, [output_handle] # hFile
    mov rdx, rdi            # lpBuffer
    mov r8, rsi             # nNumberOfBytesToWrite
    lea r9, [bytes_written] # lpNumberOfBytesWritten
    push 0                  # lpOverlapped = NULL
    call [WriteFile]
    add rsp, 8
    
    # 检查错误
    test rax, rax
    jz .error
    
    # 返回写入的字节数
    mov rax, [bytes_written]
    jmp .exit
    
.error:
    mov rax, -1
    
.exit:
    leave
    ret

# 输出错误信息
print_error:
    push rbp
    mov rbp, rsp
    
    # rdi = 错误消息
    
    # 获取标准错误句柄
    mov rcx, STD_ERROR_HANDLE
    call [GetStdHandle]
    
    # 写入错误消息
    mov rcx, rax           # hFile
    mov rdx, rdi          # lpBuffer
    mov r8, -1            # nNumberOfBytesToWrite = strlen
    lea r9, [bytes_written] # lpNumberOfBytesWritten
    push 0                # lpOverlapped = NULL
    call [WriteFile]
    add rsp, 8
    
    # 写入换行
    mov rcx, rax          # hFile
    lea rdx, [newline]    # lpBuffer
    mov r8, 2             # nNumberOfBytesToWrite
    lea r9, [bytes_written] # lpNumberOfBytesWritten
    push 0                # lpOverlapped = NULL
    call [WriteFile]
    add rsp, 8
    
    leave
    ret

# 初始化词法分析器
init_lexer:
    push rbp
    mov rbp, rsp
    
    # 清空缓冲区
    mov qword [input_pos], 0
    mov qword [token_len], 0
    mov qword [token_type], TOKEN_NONE
    mov qword [token_value], 0
    
    leave
    ret

# 读取下一个字符
next_char:
    push rbp
    mov rbp, rsp
    
    # 检查缓冲区是否为空
    mov rax, [input_pos]
    cmp rax, [bytes_read]
    jb .has_char
    
    # 读取新的数据
    lea rdi, [input_buffer]
    mov rsi, 4096
    call read_file
    test rax, rax
    js .error
    
    # 更新缓冲区位置
    mov qword [input_pos], 0
    mov [bytes_read], rax
    test rax, rax
    jz .eof
    
.has_char:
    # 获取当前字符
    mov rax, [input_pos]
    movzx rax, byte [input_buffer + rax]
    inc qword [input_pos]
    jmp .exit
    
.eof:
    xor rax, rax
    
.error:
    mov rax, -1
    
.exit:
    leave
    ret

# 跳过空白字符
skip_whitespace:
    push rbp
    mov rbp, rsp
    
.loop:
    call next_char
    test rax, rax
    jz .done
    js .error
    
    # 检查是否为空白字符
    cmp al, ' '
    je .loop
    cmp al, 9  # TAB
    je .loop
    cmp al, 13 # CR
    je .loop
    cmp al, 10 # LF
    je .loop
    
    # 非空白字符,回退一个位置
    dec qword [input_pos]
    xor rax, rax
    jmp .exit
    
.done:
    xor rax, rax
    jmp .exit
    
.error:
    mov rax, 1
    
.exit:
    leave
    ret

# 读取标识符
read_identifier:
    push rbp
    mov rbp, rsp
    
    # 清空token缓冲区
    mov qword [token_len], 0
    
.loop:
    call next_char
    test rax, rax
    jz .done
    js .error
    
    # 检查是否为有效字符
    cmp al, 'a'
    jb .check_upper
    cmp al, 'z'
    jbe .valid
    
.check_upper:
    cmp al, 'A'
    jb .check_digit
    cmp al, 'Z'
    jbe .valid
    
.check_digit:
    cmp al, '0'
    jb .check_special
    cmp al, '9'
    jbe .valid
    
.check_special:
    cmp al, '_'
    je .valid
    
    # 无效字符,回退一个位置
    dec qword [input_pos]
    jmp .done
    
.valid:
    # 保存字符
    mov rcx, [token_len]
    mov [token_buffer + rcx], al
    inc qword [token_len]
    jmp .loop
    
.done:
    # 添加结束符
    mov rcx, [token_len]
    mov byte [token_buffer + rcx], 0
    
    # 检查是否为指令
    lea rdi, [token_buffer]
    lea rsi, [instructions]
    call check_keyword
    test rax, rax
    jnz .is_inst
    
    # 检查是否为寄存器
    lea rdi, [token_buffer]
    lea rsi, [registers]
    call check_keyword
    test rax, rax
    jnz .is_reg
    
    # 是标签
    mov qword [token_type], TOKEN_LABEL
    jmp .success
    
.is_inst:
    mov qword [token_type], TOKEN_INST
    mov [token_value], rax
    jmp .success
    
.is_reg:
    mov qword [token_type], TOKEN_REG
    mov [token_value], rax
    
.success:
    xor rax, rax
    jmp .exit
    
.error:
    mov rax, 1
    
.exit:
    leave
    ret

# 读取数字
read_number:
    push rbp
    mov rbp, rsp
    
    # 初始化结果
    xor r8, r8  # 结果
    mov r9, 10  # 基数
    
.loop:
    call next_char
    test rax, rax
    jz .done
    js .error
    
    # 检查是否为数字
    cmp al, '0'
    jb .done
    cmp al, '9'
    ja .done
    
    # 转换为数值
    sub al, '0'
    movzx rax, al
    
    # 结果 = 结果 * 10 + 数字
    mov rdx, r8
    imul rdx, r9
    add rdx, rax
    mov r8, rdx
    
    jmp .loop
    
.done:
    # 回退一个位置
    dec qword [input_pos]
    
    # 设置token类型和值
    mov qword [token_type], TOKEN_NUM
    mov [token_value], r8
    
    xor rax, rax
    jmp .exit
    
.error:
    mov rax, 1
    
.exit:
    leave
    ret

# 获取下一个token
next_token:
    push rbp
    mov rbp, rsp
    
    # 跳过空白字符
    call skip_whitespace
    test rax, rax
    jnz .error
    
    # 读取字符
    call next_char
    test rax, rax
    jz .eof
    js .error
    
    # 检查字符类型
    cmp al, 'a'
    jb .check_upper
    cmp al, 'z'
    jbe .identifier
    
.check_upper:
    cmp al, 'A'
    jb .check_digit
    cmp al, 'Z'
    jbe .identifier
    
.check_digit:
    cmp al, '0'
    jb .check_special
    cmp al, '9'
    jbe .number
    
.check_special:
    cmp al, '_'
    je .identifier
    
    # 符号
    mov byte [token_buffer], al
    mov byte [token_buffer + 1], 0
    mov qword [token_type], TOKEN_SYM
    mov qword [token_value], 0
    xor rax, rax
    jmp .exit
    
.identifier:
    # 回退一个位置
    dec qword [input_pos]
    call read_identifier
    jmp .exit
    
.number:
    # 回退一个位置
    dec qword [input_pos]
    call read_number
    jmp .exit
    
.eof:
    mov qword [token_type], TOKEN_NONE
    xor rax, rax
    jmp .exit
    
.error:
    mov rax, 1
    
.exit:
    leave
    ret

# 检查关键字
check_keyword:
    push rbp
    mov rbp, rsp
    
    # rdi = token字符串
    # rsi = 关键字表
    
    xor rcx, rcx  # 索引
    
.loop:
    # 检查是否到达表尾
    mov al, [rsi]
    test al, al
    jz .not_found
    
    # 比较字符串
    push rdi
    push rsi
    call strcmp
    pop rsi
    pop rdi
    
    # 找到匹配
    test rax, rax
    jz .found
    
    # 跳到下一个关键字
.next:
    mov al, [rsi]
    inc rsi
    test al, al
    jnz .next
    inc rsi
    inc rcx
    jmp .loop
    
.found:
    mov rax, rcx
    jmp .exit
    
.not_found:
    xor rax, rax
    
.exit:
    leave
    ret

# 字符串比较
strcmp:
    push rbp
    mov rbp, rsp
    
    # rdi = str1
    # rsi = str2
    
.loop:
    mov al, [rdi]
    mov dl, [rsi]
    
    # 检查结束
    test al, al
    jz .check_end
    test dl, dl
    jz .not_equal
    
    # 比较字符
    cmp al, dl
    jne .not_equal
    
    inc rdi
    inc rsi
    jmp .loop
    
.check_end:
    test dl, dl
    jz .equal
    
.not_equal:
    mov rax, 1
    jmp .exit
    
.equal:
    xor rax, rax
    
.exit:
    leave
    ret

# 初始化语法分析器
init_parser:
    push rbp
    mov rbp, rsp
    
    # 初始化词法分析器
    call init_lexer
    
    # 初始化标签表
    mov qword [label_count], 0
    
    leave
    ret

# 解析语句
parse_statement:
    push rbp
    mov rbp, rsp
    
    # 获取下一个token
    call next_token
    test rax, rax
    jnz .error
    
    # 检查token类型
    mov rax, [token_type]
    
    # 文件结束
    test rax, rax
    jz .done
    
    # 标签定义
    cmp rax, TOKEN_LABEL
    je .parse_label
    
    # 指令
    cmp rax, TOKEN_INST
    je .parse_instruction
    
    # 语法错误
    lea rdi, [ERR_SYNTAX]
    call print_error
    mov rax, 1
    jmp .exit
    
.parse_label:
    # 保存标签位置
    mov rax, [token_buffer]
    mov rcx, [label_count]
    mov [label_table + rcx * 8], rax
    inc qword [label_count]
    
    # 检查冒号
    call next_token
    test rax, rax
    jnz .error
    
    mov rax, [token_type]
    cmp rax, TOKEN_SYM
    jne .syntax_error
    
    mov al, [token_buffer]
    cmp al, ':'
    jne .syntax_error
    
    # 继续解析下一个语句
    call parse_statement
    jmp .exit
    
.parse_instruction:
    # 保存指令类型
    mov rax, [token_value]
    push rax
    
    # 解析操作数
    call parse_operands
    pop rcx  # 恢复指令类型
    test rax, rax
    jnz .error
    
    # 生成代码
    mov rdi, rcx
    call generate_code
    jmp .exit
    
.syntax_error:
    lea rdi, [ERR_SYNTAX]
    call print_error
    mov rax, 1
    jmp .exit
    
.done:
    xor rax, rax
    
.error:
    mov rax, 1
    
.exit:
    leave
    ret

# 解析操作数
parse_operands:
    push rbp
    mov rbp, rsp
    
    # 获取下一个token
    call next_token
    test rax, rax
    jnz .error
    
    # 检查token类型
    mov rax, [token_type]
    
    # 文件结束或换行
    test rax, rax
    jz .done
    
    # 寄存器
    cmp rax, TOKEN_REG
    je .parse_reg
    
    # 数字
    cmp rax, TOKEN_NUM
    je .parse_num
    
    # 标签
    cmp rax, TOKEN_LABEL
    je .parse_label_ref
    
    # 语法错误
    lea rdi, [ERR_SYNTAX]
    call print_error
    mov rax, 1
    jmp .exit
    
.parse_reg:
    # 保存寄存器编号
    mov rax, [token_value]
    push rax
    
    # 检查是否有逗号
    call next_token
    test rax, rax
    jnz .error
    
    mov rax, [token_type]
    cmp rax, TOKEN_SYM
    jne .done_reg
    
    mov al, [token_buffer]
    cmp al, ','
    jne .done_reg
    
    # 解析下一个操作数
    call parse_operands
    jmp .exit
    
.done_reg:
    # 回退一个token
    dec qword [input_pos]
    xor rax, rax
    jmp .exit
    
.parse_num:
    # 保存数值
    mov rax, [token_value]
    push rax
    
    # 检查是否有逗号
    call next_token
    test rax, rax
    jnz .error
    
    mov rax, [token_type]
    cmp rax, TOKEN_SYM
    jne .done_num
    
    mov al, [token_buffer]
    cmp al, ','
    jne .done_num
    
    # 解析下一个操作数
    call parse_operands
    jmp .exit
    
.done_num:
    # 回退一个token
    dec qword [input_pos]
    xor rax, rax
    jmp .exit
    
.parse_label_ref:
    # 保存标签引用
    mov rax, [token_buffer]
    push rax
    
    # 检查是否有逗号
    call next_token
    test rax, rax
    jnz .error
    
    mov rax, [token_type]
    cmp rax, TOKEN_SYM
    jne .done_label
    
    mov al, [token_buffer]
    cmp al, ','
    jne .done_label
    
    # 解析下一个操作数
    call parse_operands
    jmp .exit
    
.done_label:
    # 回退一个token
    dec qword [input_pos]
    xor rax, rax
    jmp .exit
    
.done:
    xor rax, rax
    
.error:
    mov rax, 1
    
.exit:
    leave
    ret

# 解析标签引用
resolve_labels:
    push rbp
    mov rbp, rsp
    
    # 遍历标签表
    mov rcx, [label_count]
    test rcx, rcx
    jz .done
    
    xor rdx, rdx  # 索引
    
.loop:
    # 获取标签位置
    mov rax, [label_table + rdx * 8]
    test rax, rax
    jz .next
    
    # 更新引用
    push rcx
    push rdx
    mov rdi, rax
    call update_label_refs
    pop rdx
    pop rcx
    test rax, rax
    jnz .error
    
.next:
    inc rdx
    loop .loop
    
.done:
    xor rax, rax
    jmp .exit
    
.error:
    mov rax, 1
    
.exit:
    leave
    ret

# 更新标签引用
update_label_refs:
    push rbp
    mov rbp, rsp
    
    # rdi = 标签名
    
    # 遍历代码中的标签引用
    mov rcx, [code_offset]
    test rcx, rcx
    jz .done
    
    xor rdx, rdx  # 索引
    
.loop:
    # 获取引用位置
    mov rax, [reloc_table + rdx * 8]
    test rax, rax
    jz .next
    
    # 比较标签名
    push rcx
    push rdx
    push rdi
    mov rsi, rax
    call strcmp
    pop rdi
    pop rdx
    pop rcx
    test rax, rax
    jnz .next
    
    # 更新引用
    mov rax, [label_table + rdx * 8]
    mov [code_buffer + rdx], rax
    
.next:
    inc rdx
    loop .loop
    
.done:
    xor rax, rax
    
.exit:
    leave
    ret

# 初始化代码生成器
init_generator:
    push rbp
    mov rbp, rsp
    
    # 清空代码缓冲区
    mov qword [code_offset], 0
    
    leave
    ret

# 生成代码
generate_code:
    push rbp
    mov rbp, rsp
    
    # rdi = 指令类型
    
    # 检查指令类型
    cmp rdi, 0  # mov
    je .gen_mov
    cmp rdi, 1  # add
    je .gen_add
    cmp rdi, 2  # sub
    je .gen_sub
    cmp rdi, 3  # push
    je .gen_push
    cmp rdi, 4  # pop
    je .gen_pop
    cmp rdi, 5  # call
    je .gen_call
    cmp rdi, 6  # ret
    je .gen_ret
    cmp rdi, 7  # jmp
    je .gen_jmp
    cmp rdi, 8  # je
    je .gen_je
    cmp rdi, 9  # jne
    je .gen_jne
    cmp rdi, 10 # jz
    je .gen_jz
    cmp rdi, 11 # jnz
    je .gen_jnz
    
    # 未知指令
    lea rdi, [ERR_UNKNOWN_INST]
    call print_error
    mov rax, 1
    jmp .exit
    
.gen_mov:
    # 获取操作数
    pop rsi  # 目标寄存器
    pop rdi  # 源操作数
    
    # 检查操作数类型
    mov rax, [token_type]
    cmp rax, TOKEN_REG
    je .mov_reg_reg
    cmp rax, TOKEN_NUM
    je .mov_reg_imm
    
    # 不支持的操作数类型
    lea rdi, [ERR_OPERAND]
    call print_error
    mov rax, 1
    jmp .exit
    
.mov_reg_reg:
    # 生成MOV r64, r64指令
    lea rdi, [MOV_REG_REG]
    mov rcx, 3
    call emit_bytes
    
    # 设置寄存器编码
    mov rax, rsi
    shl rax, 3
    or rax, rdi
    call emit_byte
    jmp .done
    
.mov_reg_imm:
    # 生成MOV r64, imm64指令
    lea rdi, [MOV_REG_IMM]
    mov rcx, 2
    call emit_bytes
    
    # 设置寄存器编码
    mov rax, rsi
    add rax, 0xB8
    call emit_byte
    
    # 输出立即数
    mov rax, rdi
    call emit_qword
    jmp .done
    
.gen_add:
    # 获取操作数
    pop rsi  # 目标寄存器
    pop rdi  # 源操作数
    
    # 检查操作数类型
    mov rax, [token_type]
    cmp rax, TOKEN_REG
    jne .operand_error
    
    # 生成ADD r64, r64指令
    lea rdi, [ADD_REG_REG]
    mov rcx, 3
    call emit_bytes
    
    # 设置寄存器编码
    mov rax, rsi
    shl rax, 3
    or rax, rdi
    call emit_byte
    jmp .done
    
.gen_sub:
    # 获取操作数
    pop rsi  # 目标寄存器
    pop rdi  # 源操作数
    
    # 检查操作数类型
    mov rax, [token_type]
    cmp rax, TOKEN_REG
    jne .operand_error
    
    # 生成SUB r64, r64指令
    lea rdi, [SUB_REG_REG]
    mov rcx, 3
    call emit_bytes
    
    # 设置寄存器编码
    mov rax, rsi
    shl rax, 3
    or rax, rdi
    call emit_byte
    jmp .done
    
.gen_push:
    # 获取操作数
    pop rdi  # 寄存器
    
    # 生成PUSH r64指令
    mov rax, 0x50
    add rax, rdi
    call emit_byte
    jmp .done
    
.gen_pop:
    # 获取操作数
    pop rdi  # 寄存器
    
    # 生成POP r64指令
    mov rax, 0x58
    add rax, rdi
    call emit_byte
    jmp .done
    
.gen_call:
    # 获取操作数
    pop rdi  # 目标标签
    
    # 生成CALL rel32指令
    mov rax, 0xE8
    call emit_byte
    
    # 添加重定位项
    mov rax, [code_offset]
    mov [reloc_table + rax], rdi
    
    # 输出占位符
    xor rax, rax
    call emit_dword
    jmp .done
    
.gen_ret:
    # 生成RET指令
    mov rax, 0xC3
    call emit_byte
    jmp .done
    
.gen_jmp:
    # 获取操作数
    pop rdi  # 目标标签
    
    # 生成JMP rel32指令
    mov rax, 0xE9
    call emit_byte
    
    # 添加重定位项
    mov rax, [code_offset]
    mov [reloc_table + rax], rdi
    
    # 输出占位符
    xor rax, rax
    call emit_dword
    jmp .done
    
.gen_je:
    # 获取操作数
    pop rdi  # 目标标签
    
    # 生成JE rel32指令
    mov rax, 0x0F
    call emit_byte
    mov rax, 0x84
    call emit_byte
    
    # 添加重定位项
    mov rax, [code_offset]
    mov [reloc_table + rax], rdi
    
    # 输出占位符
    xor rax, rax
    call emit_dword
    jmp .done
    
.gen_jne:
    # 获取操作数
    pop rdi  # 目标标签
    
    # 生成JNE rel32指令
    mov rax, 0x0F
    call emit_byte
    mov rax, 0x85
    call emit_byte
    
    # 添加重定位项
    mov rax, [code_offset]
    mov [reloc_table + rax], rdi
    
    # 输出占位符
    xor rax, rax
    call emit_dword
    jmp .done
    
.gen_jz:
    # 获取操作数
    pop rdi  # 目标标签
    
    # 生成JZ rel32指令
    mov rax, 0x0F
    call emit_byte
    mov rax, 0x84
    call emit_byte
    
    # 添加重定位项
    mov rax, [code_offset]
    mov [reloc_table + rax], rdi
    
    # 输出占位符
    xor rax, rax
    call emit_dword
    jmp .done
    
.gen_jnz:
    # 获取操作数
    pop rdi  # 目标标签
    
    # 生成JNZ rel32指令
    mov rax, 0x0F
    call emit_byte
    mov rax, 0x85
    call emit_byte
    
    # 添加重定位项
    mov rax, [code_offset]
    mov [reloc_table + rax], rdi
    
    # 输出占位符
    xor rax, rax
    call emit_dword
    jmp .done
    
.operand_error:
    lea rdi, [ERR_OPERAND]
    call print_error
    mov rax, 1
    jmp .exit
    
.done:
    xor rax, rax
    
.exit:
    leave
    ret

# 输出字节
emit_byte:
    push rbp
    mov rbp, rsp
    
    # rax = 要输出的字节
    
    mov rcx, [code_offset]
    mov [code_buffer + rcx], al
    inc qword [code_offset]
    
    leave
    ret

# 输出多个字节
emit_bytes:
    push rbp
    mov rbp, rsp
    
    # rdi = 字节数组
    # rcx = 字节数
    
    mov rdx, [code_offset]
    
.loop:
    mov al, [rdi]
    mov [code_buffer + rdx], al
    inc rdi
    inc rdx
    loop .loop
    
    mov [code_offset], rdx
    
    leave
    ret

# 输出双字
emit_dword:
    push rbp
    mov rbp, rsp
    
    # rax = 要输出的双字
    
    mov rcx, [code_offset]
    mov [code_buffer + rcx], eax
    add qword [code_offset], 4
    
    leave
    ret

# 输出四字
emit_qword:
    push rbp
    mov rbp, rsp
    
    # rax = 要输出的四字
    
    mov rcx, [code_offset]
    mov [code_buffer + rcx], rax
    add qword [code_offset], 8
    
    leave
    ret