; 代码段读写稳定性测试
section .data
    ; 测试数据
    test_patterns:
        ; 模式1：全0
        db 0x00, 0x00, 0x00, 0x00
        ; 模式2：全1
        db 0xFF, 0xFF, 0xFF, 0xFF
        ; 模式3：交替
        db 0xAA, 0x55, 0xAA, 0x55
        ; 模式4：递增
        db 0x00, 0x01, 0x02, 0x03
        ; 模式5：递减
        db 0xFF, 0xFE, 0xFD, 0xFC
    pattern_size: equ 4
    pattern_count: equ 5
    
    ; 测试代码模板
    code_template:
        db 0x01, 0x01, 0x00        ; mov r1, X
        db 0x01, 0x02, 0x00        ; mov r2, Y
        db 0x10, 0x01, 0x02        ; add r1, r2
        db 0xFF                    ; hlt
    template_size: equ $ - code_template
    
    ; 结果存储
    test_results: times 5 dq 0     ; 每个模式的测试结果

section .code
    ; 初始化
    mov r7, 0                      ; 成功计数
    mov r6, 0                      ; 当前模式索引

test_pattern_loop:
    ; 检查是否测试完所有模式
    cmp r6, pattern_count
    je test_done
    
    ; 计算当前模式地址
    mov r1, test_patterns
    mov r2, pattern_size
    mul r2, r6
    add r1, r2                     ; r1 = 当前模式地址
    
    ; 1. 写入测试
    mov r3, [CODE_SEGMENT_START]
    add r3, r6
    mul r3, 100                    ; 每个测试间隔100字节
    
    ; 复制代码模板
    write_code r3, code_template, template_size
    
    ; 2. 读取测试
    mov r4, r3
    add r4, 100                    ; 读取目标位置
    read_code r4, r3, template_size
    
    ; 3. 验证读取的内容
    mov r5, template_size          ; 大小
    push r1                        ; 保存模式地址
    push r3                        ; 保存源地址
    push r4                        ; 保存目标地址
    
verify_loop:
    cmp r5, 0
    je verify_done
    
    mov r1, [r3]                   ; 读取源字节
    mov r2, [r4]                   ; 读取目标字节
    cmp r1, r2                     ; 比较
    jne verify_failed
    
    add r3, 1                      ; 移动到下一个字节
    add r4, 1
    sub r5, 1
    jmp verify_loop
    
verify_failed:
    pop r4
    pop r3
    pop r1
    mov [test_results + r6*8], 0   ; 记录失败
    jmp next_pattern
    
verify_done:
    pop r4
    pop r3
    pop r1
    
    ; 4. 执行验证
    verify_code r4, template_size
    
    ; 5. 执行测试代码
    push r6                        ; 保存模式索引
    jmp r4                         ; 执行复制的代码
    
    ; 6. 记录结果
    pop r6                         ; 恢复模式索引
    mov [test_results + r6*8], 1   ; 记录成功
    add r7, 1                      ; 增加成功计数
    
next_pattern:
    add r6, 1                      ; 移动到下一个模式
    jmp test_pattern_loop
    
test_done:
    ; 返回成功率（r7 = 成功次数）
    hlt 