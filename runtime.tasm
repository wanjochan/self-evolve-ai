; TASM Runtime
; 平台: Windows x64

; 内存布局：
; 0x0000-0x0040: API占位符
; 0x0040-0x0080: 寄存器空间
; 0x0080-0x00C0: 标志位空间
; 0x00C0-0x0100: 临时空间
; 0x0100-0x1100: 栈空间(4KB)
; 0x1100-0x2100: 备份空间(4KB)
; 0x2100-....: 程序空间

section .data
    ; API占位符（8字节对齐）
api_getstdhandle:
    db "API_WIN_GETSTDHANDLE", 0, 0, 0, 0, 0, 0, 0, 0
api_writeconsolea:
    db "API_WIN_WRITECONSOLEA", 0, 0, 0, 0, 0, 0, 0, 0
api_readconsolea:
    db "API_WIN_READCONSOLEA", 0, 0, 0, 0, 0, 0, 0, 0
api_exitprocess:
    db "API_WIN_EXITPROCESS", 0, 0, 0, 0, 0, 0, 0, 0

; 系统常量
CODE_SEGMENT_START:    dq 0x2100   ; 代码段起始地址（调整）
CODE_SEGMENT_SIZE:     dq 0        ; 代码段大小（运行时设置）
BACKUP_START:         dq 0x1100   ; 备份区起始地址
BACKUP_SIZE:          dq 0        ; 当前备份大小
INSTRUCTION_COUNT:    dq 0        ; 指令计数器
LAST_ERROR:          dq 0        ; 最后的错误代码
MUTATION_COUNT:      dq 0        ; 变异计数器
BACKUP_VALID:        dq 0        ; 备份是否有效

section .code
    ; Runtime入口点
    ; 参数:
    ;   0 = 程序基址
    ;   1 = 程序大小
entry:
    ; 保存参数
    push 0
    push 1
    push 2
    push 3
    push 4
    push 5
    push 6
    push 7

    ; 设置程序基址和大小
    pop 7
    pop 6
    pop 5
    pop 4
    pop 3
    pop 2
    pop 1
    pop 0

    ; 初始化代码段信息
    mov [CODE_SEGMENT_START], r0
    mov [CODE_SEGMENT_SIZE], r1
    
    ; 初始化备份信息
    mov [BACKUP_VALID], 0
    mov [BACKUP_SIZE], 0
    mov [MUTATION_COUNT], 0

    ; 跳转到程序入口点
    jmp 0

    ; 程序返回后，返回值已经在7中
    ret

; 主循环：取指令-解码-执行
fetch_decode_execute:
    ; 增加指令计数
    mov r4, [INSTRUCTION_COUNT]
    add r4, 1
    mov [INSTRUCTION_COUNT], r4

    ; 检查是否到达程序末尾
    mov r4, r3
    cmp r4, r1
    jge exit

    ; 读取指令
    mov r4, r0
    add r4, r3
    mov r5, [r4]

    ; 解码操作码
    mov r6, r5
    and r6, 0xFF

    ; 根据操作码跳转到对应处理程序
    cmp r6, 0x01
    je handle_mov
    cmp r6, 0x10
    je handle_add
    cmp r6, 0x11
    je handle_sub
    cmp r6, 0x12
    je handle_mul
    cmp r6, 0x13
    je handle_div
    cmp r6, 0x30
    je handle_cmp
    cmp r6, 0x40
    je handle_jmp
    cmp r6, 0x41
    je handle_je
    cmp r6, 0x42
    je handle_jne
    cmp r6, 0x60
    je handle_syscall
    ; 代码段操作指令
    cmp r6, 0x70
    je handle_read_code
    cmp r6, 0x71
    je handle_write_code
    cmp r6, 0x72
    je handle_verify_code
    ; 新增的备份和回滚指令
    cmp r6, 0x73
    je handle_backup_code
    cmp r6, 0x74
    je handle_restore_code
    cmp r6, 0x75
    je handle_mutate_code
    cmp r6, 0xFF
    je exit

    ; 未知指令，继续执行下一条
    add r3, 3
    jmp fetch_decode_execute

; 指令处理程序
handle_mov:
    ; 获取操作数
    mov r4, r0
    add r4, r3
    add r4, 1
    mov r4, [r4]
    
    mov r5, r0
    add r5, r3
    add r5, 2
    mov r5, [r5]
    
    ; 计算源地址
    mov r6, r2
    add r6, r5
    
    ; 读取源值
    mov r7, [r6]
    
    ; 计算目标地址
    mov r6, r2
    add r6, r4
    
    ; 写入目标
    mov [r6], r7
    
    ; 更新PC
    add r3, 3
    jmp fetch_decode_execute

handle_add:
    ; 获取操作数
    mov r4, r0
    add r4, r3
    add r4, 1
    mov r4, [r4]
    
    mov r5, r0
    add r5, r3
    add r5, 2
    mov r5, [r5]
    
    ; 计算源地址
    mov r6, r2
    add r6, r5
    
    ; 读取源值
    mov r7, [r6]
    
    ; 计算目标地址
    mov r6, r2
    add r6, r4
    
    ; 读取目标值
    mov r5, [r6]
    
    ; 执行加法
    add r5, r7
    
    ; 写回结果
    mov [r6], r5
    
    ; 更新标志位
    mov [0x80], 0
    cmp r5, 0
    jne add_not_zero
    mov [0x80], 1
add_not_zero:
    add r3, 3
    jmp fetch_decode_execute

handle_sub:
    ; 获取操作数
    mov r4, r0
    add r4, r3
    add r4, 1
    mov r4, [r4]
    
    mov r5, r0
    add r5, r3
    add r5, 2
    mov r5, [r5]
    
    ; 计算源地址
    mov r6, r2
    add r6, r5
    
    ; 读取源值
    mov r7, [r6]
    
    ; 计算目标地址
    mov r6, r2
    add r6, r4
    
    ; 读取目标值
    mov r5, [r6]
    
    ; 执行减法
    sub r5, r7
    
    ; 写回结果
    mov [r6], r5
    
    ; 更新标志位
    mov [0x80], 0
    cmp r5, 0
    jne sub_not_zero
    mov [0x80], 1
sub_not_zero:
    add r3, 3
    jmp fetch_decode_execute

handle_mul:
    ; 获取操作数
    mov r4, r0
    add r4, r3
    add r4, 1
    mov r4, [r4]
    
    mov r5, r0
    add r5, r3
    add r5, 2
    mov r5, [r5]
    
    ; 计算源地址
    mov r6, r2
    add r6, r5
    
    ; 读取源值
    mov r7, [r6]
    
    ; 计算目标地址
    mov r6, r2
    add r6, r4
    
    ; 读取目标值
    mov r5, [r6]
    
    ; 执行乘法
    mul r5, r7
    
    ; 写回结果
    mov [r6], r5
    
    ; 更新PC
    add r3, 3
    jmp fetch_decode_execute

handle_div:
    ; 获取操作数
    mov r4, r0
    add r4, r3
    add r4, 1
    mov r4, [r4]
    
    mov r5, r0
    add r5, r3
    add r5, 2
    mov r5, [r5]
    
    ; 计算源地址
    mov r6, r2
    add r6, r5
    
    ; 读取源值
    mov r7, [r6]
    
    ; 检查除数是否为0
    cmp r7, 0
    je handle_div_by_zero
    
    ; 计算目标地址
    mov r6, r2
    add r6, r4
    
    ; 读取目标值
    mov r5, [r6]
    
    ; 执行除法
    div r5, r7
    
    ; 写回结果
    mov [r6], r5
    
    ; 更新PC
    add r3, 3
    jmp fetch_decode_execute

handle_div_by_zero:
    mov r7, 1
    jmp exit

handle_cmp:
    ; 获取操作数
    mov r4, r0
    add r4, r3
    add r4, 1
    mov r4, [r4]
    
    mov r5, r0
    add r5, r3
    add r5, 2
    mov r5, [r5]
    
    ; 计算第一个操作数地址
    mov r6, r2
    add r6, r4
    
    ; 读取第一个操作数
    mov r7, [r6]
    
    ; 计算第二个操作数地址
    mov r6, r2
    add r6, r5
    
    ; 读取第二个操作数
    mov r4, [r6]
    
    ; 执行比较
    cmp r7, r4
    
    ; 更新标志位
    mov [0x80], 0
    je cmp_equal
    jmp cmp_done
cmp_equal:
    mov [0x80], 1
cmp_done:
    add r3, 3
    jmp fetch_decode_execute

handle_jmp:
    ; 获取目标地址
    mov r4, r0
    add r4, r3
    add r4, 1
    mov r4, [r4]
    mov r3, r4
    jmp fetch_decode_execute

handle_je:
    ; 获取目标地址
    mov r4, r0
    add r4, r3
    add r4, 1
    mov r4, [r4]
    cmp [0x80], 1
    jne je_not_equal
    mov r3, r4
    jmp fetch_decode_execute
je_not_equal:
    add r3, 3
    jmp fetch_decode_execute

handle_jne:
    ; 获取目标地址
    mov r4, r0
    add r4, r3
    add r4, 1
    mov r4, [r4]
    cmp [0x80], 0
    jne jne_not_equal
    mov r3, r4
    jmp fetch_decode_execute
jne_not_equal:
    add r3, 3
    jmp fetch_decode_execute

handle_syscall:
    ; 获取系统调用号
    mov r4, r0
    add r4, r3
    add r4, 1
    mov r4, [r4]
    cmp r4, 0x01
    je syscall_getstdhandle
    cmp r4, 0x02
    je syscall_writeconsolea
    cmp r4, 0x03
    je syscall_readconsolea
    cmp r4, 0x04
    je syscall_exitprocess
    mov r7, 1
    jmp exit

syscall_getstdhandle:
    mov r4, 0x0000
    call [r4]
    mov r7, r0
    add r3, 2
    jmp fetch_decode_execute

syscall_writeconsolea:
    mov r4, 0x0010
    call [r4]
    mov r7, r0
    add r3, 2
    jmp fetch_decode_execute

syscall_readconsolea:
    mov r4, 0x0020
    call [r4]
    mov r7, r0
    add r3, 2
    jmp fetch_decode_execute

syscall_exitprocess:
    mov r4, 0x0030
    call [r4]

; 代码段读取指令
; 格式: read_code dst_addr, src_addr, size
handle_read_code:
    ; 获取参数
    mov r4, r0
    add r4, r3
    add r4, 1
    mov r4, [r4]    ; dst_addr
    
    mov r5, r0
    add r5, r3
    add r5, 2
    mov r5, [r5]    ; src_addr
    
    mov r6, r0
    add r6, r3
    add r6, 3
    mov r6, [r6]    ; size

    ; 验证源地址范围
    mov r7, [CODE_SEGMENT_START]
    cmp r5, r7
    jl read_code_error
    
    add r7, [CODE_SEGMENT_SIZE]
    add r5, r6
    cmp r5, r7
    jg read_code_error
    
    ; 执行复制
    mov r7, r6      ; 保存size
    mov r6, r5      ; src
    mov r5, r4      ; dst
    
    ; 循环复制
read_code_loop:
    cmp r7, 0
    je read_code_done
    mov r4, [r6]
    mov [r5], r4
    add r5, 1
    add r6, 1
    sub r7, 1
    jmp read_code_loop
    
read_code_done:
    add r3, 4
    jmp fetch_decode_execute
    
read_code_error:
    mov [LAST_ERROR], 1
    mov r7, 1
    jmp exit

; 代码段写入指令
; 格式: write_code dst_addr, src_addr, size
handle_write_code:
    ; 获取参数
    mov r4, r0
    add r4, r3
    add r4, 1
    mov r4, [r4]    ; dst_addr
    
    mov r5, r0
    add r5, r3
    add r5, 2
    mov r5, [r5]    ; src_addr
    
    mov r6, r0
    add r6, r3
    add r6, 3
    mov r6, [r6]    ; size

    ; 验证目标地址范围
    mov r7, [CODE_SEGMENT_START]
    cmp r4, r7
    jl write_code_error
    
    add r7, [CODE_SEGMENT_SIZE]
    add r4, r6
    cmp r4, r7
    jg write_code_error
    
    ; 执行复制
    mov r7, r6      ; 保存size
    mov r6, r5      ; src
    mov r5, r4      ; dst
    
    ; 循环复制
write_code_loop:
    cmp r7, 0
    je write_code_done
    mov r4, [r6]
    mov [r5], r4
    add r5, 1
    add r6, 1
    sub r7, 1
    jmp write_code_loop
    
write_code_done:
    ; 刷新指令缓存
    mov r4, 0x0040
    call [r4]
    add r3, 4
    jmp fetch_decode_execute
    
write_code_error:
    mov [LAST_ERROR], 2
    mov r7, 1
    jmp exit

; 代码验证指令
; 格式: verify_code addr, size
handle_verify_code:
    ; 获取参数
    mov r4, r0
    add r4, r3
    add r4, 1
    mov r4, [r4]    ; addr
    
    mov r5, r0
    add r5, r3
    add r5, 2
    mov r5, [r5]    ; size

    ; 验证地址范围
    mov r6, [CODE_SEGMENT_START]
    cmp r4, r6
    jl verify_code_error
    
    add r6, [CODE_SEGMENT_SIZE]
    add r4, r5
    cmp r4, r6
    jg verify_code_error
    
    ; 保存原始参数
    push r4
    push r5
    
    ; 基本语法检查
    sub r4, r5      ; 恢复起始地址
    mov r6, r5      ; 保存大小
    mov r7, 0       ; 初始化错误标志
    
verify_code_loop:
    cmp r6, 0
    je verify_code_syntax_done
    
    ; 读取操作码
    mov r5, [r4]
    and r5, 0xFF
    
    ; 验证操作码有效性
    cmp r5, 0x01    ; mov
    je verify_code_valid
    cmp r5, 0x10    ; add
    je verify_code_valid
    cmp r5, 0x11    ; sub
    je verify_code_valid
    cmp r5, 0x12    ; mul
    je verify_code_valid
    cmp r5, 0x13    ; div
    je verify_code_valid
    cmp r5, 0x30    ; cmp
    je verify_code_valid
    cmp r5, 0x40    ; jmp
    je verify_code_valid
    cmp r5, 0x41    ; je
    je verify_code_valid
    cmp r5, 0x42    ; jne
    je verify_code_valid
    cmp r5, 0x60    ; syscall
    je verify_code_valid
    cmp r5, 0x70    ; read_code
    je verify_code_valid
    cmp r5, 0x71    ; write_code
    je verify_code_valid
    cmp r5, 0x72    ; verify_code
    je verify_code_valid
    cmp r5, 0x73    ; backup_code
    je verify_code_valid
    cmp r5, 0x74    ; restore_code
    je verify_code_valid
    cmp r5, 0x75    ; mutate_code
    je verify_code_valid
    cmp r5, 0xFF    ; hlt
    je verify_code_valid
    
    ; 无效操作码
    mov r7, 1
    jmp verify_code_error_cleanup
    
verify_code_valid:
    add r4, 1       ; 移动到下一个字节
    sub r6, 1
    jmp verify_code_loop
    
verify_code_syntax_done:
    ; 恢复参数
    pop r5          ; size
    pop r4          ; addr
    sub r4, r5      ; 恢复起始地址
    
    ; 计算并验证校验和
    push r1
    push r2
    mov r1, r4      ; 代码地址
    mov r2, r5      ; 代码大小
    call calc_checksum
    mov r6, r7      ; 保存校验和
    
    ; 验证校验和是否有效
    ; TODO: 实现校验和验证逻辑
    
    pop r2
    pop r1
    
    add r3, 3
    jmp fetch_decode_execute
    
verify_code_error_cleanup:
    pop r5
    pop r4
    
verify_code_error:
    mov [LAST_ERROR], 3
    mov r7, 1
    jmp exit

; 计算校验和函数
; 输入：
;   r1 = 代码地址
;   r2 = 代码大小
; 输出：
;   r7 = 校验和
calc_checksum:
    push r1
    push r2
    push r3
    push r4
    
    mov r7, 0       ; 初始化校验和
    
calc_checksum_loop:
    cmp r2, 0
    je calc_checksum_done
    
    mov r3, [r1]    ; 读取一个字节
    add r7, r3      ; 累加到校验和
    rol r7, 1       ; 循环左移1位
    
    add r1, 1
    sub r2, 1
    jmp calc_checksum_loop
    
calc_checksum_done:
    pop r4
    pop r3
    pop r2
    pop r1
    ret

; 代码段备份指令
; 格式: backup_code addr, size
handle_backup_code:
    ; 获取参数
    mov r4, r0
    add r4, r3
    add r4, 1
    mov r4, [r4]    ; addr
    
    mov r5, r0
    add r5, r3
    add r5, 2
    mov r5, [r5]    ; size

    ; 验证地址范围
    mov r6, [CODE_SEGMENT_START]
    cmp r4, r6
    jl backup_code_error
    
    add r6, [CODE_SEGMENT_SIZE]
    add r4, r5
    cmp r4, r6
    jg backup_code_error
    
    ; 保存备份信息
    mov [BACKUP_SIZE], r5
    
    ; 执行备份
    mov r6, [BACKUP_START]  ; 目标地址
    sub r4, r5             ; 恢复源地址
    mov r7, r5             ; 复制大小
    
backup_code_loop:
    cmp r7, 0
    je backup_code_done
    mov r5, [r4]
    mov [r6], r5
    add r4, 1
    add r6, 1
    sub r7, 1
    jmp backup_code_loop
    
backup_code_done:
    mov [BACKUP_VALID], 1
    add r3, 3
    jmp fetch_decode_execute
    
backup_code_error:
    mov [LAST_ERROR], 4
    mov r7, 1
    jmp exit

; 代码段恢复指令
; 格式: restore_code addr
handle_restore_code:
    ; 检查备份是否有效
    cmp [BACKUP_VALID], 0
    je restore_code_error
    
    ; 获取参数
    mov r4, r0
    add r4, r3
    add r4, 1
    mov r4, [r4]    ; addr

    ; 验证地址范围
    mov r6, [CODE_SEGMENT_START]
    cmp r4, r6
    jl restore_code_error
    
    mov r5, [BACKUP_SIZE]
    add r6, [CODE_SEGMENT_SIZE]
    add r4, r5
    cmp r4, r6
    jg restore_code_error
    
    ; 执行恢复
    sub r4, r5             ; 恢复目标地址
    mov r6, [BACKUP_START] ; 源地址
    mov r7, r5             ; 复制大小
    
restore_code_loop:
    cmp r7, 0
    je restore_code_done
    mov r5, [r6]
    mov [r4], r5
    add r4, 1
    add r6, 1
    sub r7, 1
    jmp restore_code_loop
    
restore_code_done:
    ; 刷新指令缓存
    mov r4, 0x0040
    call [r4]
    add r3, 2
    jmp fetch_decode_execute
    
restore_code_error:
    mov [LAST_ERROR], 5
    mov r7, 1
    jmp exit

; 代码变异指令
; 格式: mutate_code addr, size, type
handle_mutate_code:
    ; 获取参数
    mov r4, r0
    add r4, r3
    add r4, 1
    mov r4, [r4]    ; addr
    
    mov r5, r0
    add r5, r3
    add r5, 2
    mov r5, [r5]    ; size
    
    mov r6, r0
    add r6, r3
    add r6, 3
    mov r6, [r6]    ; type

    ; 验证地址范围
    push r4
    push r5
    push r6
    
    mov r7, [CODE_SEGMENT_START]
    cmp r4, r7
    jl mutate_code_error
    
    add r7, [CODE_SEGMENT_SIZE]
    add r4, r5
    cmp r4, r7
    jg mutate_code_error
    
    ; 恢复参数
    pop r6
    pop r5
    pop r4
    
    ; 根据变异类型选择策略
    cmp r6, 1
    je mutate_instruction
    cmp r6, 2
    je mutate_operand
    cmp r6, 3
    je mutate_block
    jmp mutate_code_error

mutate_instruction:
    ; 随机选择一个指令进行变异
    push r1
    push r2
    mov r1, r4              ; 代码地址
    mov r2, r5              ; 代码大小
    call get_random_offset
    add r1, r7              ; r1 = 目标指令地址
    
    ; 读取原始操作码
    mov r2, [r1]
    and r2, 0xFF
    
    ; 生成新的操作码
    push r1
    push r2
    call get_random_opcode
    pop r2                  ; 原始操作码
    pop r1                  ; 目标地址
    
    ; 保持操作数不变，只修改操作码
    mov r2, [r1]
    and r2, 0xFFFFFF00     ; 清除原操作码
    or r2, r7              ; 添加新操作码
    mov [r1], r2
    
    pop r2
    pop r1
    jmp mutate_code_done

mutate_operand:
    ; 随机选择一个指令的操作数进行变异
    push r1
    push r2
    mov r1, r4              ; 代码地址
    mov r2, r5              ; 代码大小
    call get_random_offset
    add r1, r7              ; r1 = 目标指令地址
    
    ; 随机选择第一个或第二个操作数
    call get_random_bit
    cmp r7, 0
    je mutate_first_operand
    
    ; 变异第二个操作数
    add r1, 2
    call get_random_byte
    mov [r1], r7
    jmp mutate_operand_done
    
mutate_first_operand:
    ; 变异第一个操作数
    add r1, 1
    call get_random_byte
    mov [r1], r7
    
mutate_operand_done:
    pop r2
    pop r1
    jmp mutate_code_done

mutate_block:
    ; 随机选择一个基本块进行变异
    push r1
    push r2
    mov r1, r4              ; 代码地址
    mov r2, r5              ; 代码大小
    
    ; 找到一个基本块的起始位置
    call find_basic_block
    cmp r7, 0              ; 检查是否找到基本块
    je mutate_block_failed
    
    ; r7 = 基本块起始位置
    ; r6 = 基本块大小
    push r7                ; 保存基本块信息
    push r6
    
    ; 生成新的基本块
    call generate_basic_block
    
    ; 复制新基本块到目标位置
    pop r6                 ; 恢复基本块大小
    pop r7                 ; 恢复基本块起始位置
    
    ; TODO: 实现基本块替换
    
mutate_block_failed:
    pop r2
    pop r1
    jmp mutate_code_done

mutate_code_done:
    ; 增加变异计数
    mov r7, [MUTATION_COUNT]
    add r7, 1
    mov [MUTATION_COUNT], r7
    
    add r3, 4
    jmp fetch_decode_execute
    
mutate_code_error:
    mov [LAST_ERROR], 6
    mov r7, 1
    jmp exit

; 辅助函数：生成随机偏移
; 输入：
;   r1 = 起始地址
;   r2 = 范围大小
; 输出：
;   r7 = 随机偏移
get_random_offset:
    push r1
    push r2
    
    ; 使用指令计数器作为随机种子
    mov r7, [INSTRUCTION_COUNT]
    mov r1, 7919          ; 质数
    mul r7, r1
    add r7, 17            ; 添加扰动
    
    ; 取模得到范围内的值
    div r7, r2
    mov r7, r2            ; 使用余数
    
    pop r2
    pop r1
    ret

; 辅助函数：生成随机操作码
; 输出：
;   r7 = 随机操作码
get_random_opcode:
    push r1
    
    ; 使用变异计数器作为随机种子
    mov r7, [MUTATION_COUNT]
    mov r1, 6151          ; 质数
    mul r7, r1
    add r7, 23            ; 添加扰动
    
    ; 限制在有效操作码范围内
    and r7, 0x7F          ; 0-127
    
    ; 映射到有效操作码
    cmp r7, 0x20
    jl random_opcode_arithmetic
    cmp r7, 0x40
    jl random_opcode_control
    cmp r7, 0x60
    jl random_opcode_memory
    
    ; 默认返回mov
    mov r7, 0x01
    jmp random_opcode_done
    
random_opcode_arithmetic:
    ; 选择算术指令
    and r7, 0x03
    add r7, 0x10
    jmp random_opcode_done
    
random_opcode_control:
    ; 选择控制指令
    and r7, 0x03
    add r7, 0x40
    jmp random_opcode_done
    
random_opcode_memory:
    ; 选择内存指令
    and r7, 0x01
    add r7, 0x01
    
random_opcode_done:
    pop r1
    ret

; 辅助函数：生成随机字节
; 输出：
;   r7 = 随机字节
get_random_byte:
    push r1
    
    ; 使用指令计数器和变异计数器作为随机种子
    mov r7, [INSTRUCTION_COUNT]
    mov r1, [MUTATION_COUNT]
    add r7, r1
    mov r1, 4099          ; 质数
    mul r7, r1
    add r7, 29            ; 添加扰动
    
    ; 限制在字节范围内
    and r7, 0xFF
    
    pop r1
    ret

; 辅助函数：生成随机位
; 输出：
;   r7 = 随机位(0或1)
get_random_bit:
    push r1
    
    ; 使用指令计数器作为随机种子
    mov r7, [INSTRUCTION_COUNT]
    mov r1, 2053          ; 质数
    mul r7, r1
    add r7, 31            ; 添加扰动
    
    ; 取最低位
    and r7, 0x01
    
    pop r1
    ret

; 辅助函数：查找基本块
; 输入：
;   r1 = 代码起始地址
;   r2 = 代码大小
; 输出：
;   r7 = 基本块起始位置（如果找到）
;   r6 = 基本块大小（如果找到）
;   r7 = 0（如果未找到）
find_basic_block:
    push r1
    push r2
    push r3
    push r4
    push r5
    
    mov r7, 0              ; 默认未找到
    mov r3, r1             ; 当前位置
    mov r4, r2             ; 剩余大小
    
find_block_loop:
    cmp r4, 0
    je find_block_done
    
    ; 读取操作码
    mov r5, [r3]
    and r5, 0xFF
    
    ; 检查是否是块结束指令
    cmp r5, 0xFF          ; hlt
    je find_block_end
    cmp r5, 0x40          ; jmp
    je find_block_end
    cmp r5, 0x41          ; je
    je find_block_end
    cmp r5, 0x42          ; jne
    je find_block_end
    
    ; 移动到下一条指令
    add r3, 3
    sub r4, 3
    jmp find_block_loop
    
find_block_end:
    ; 找到一个基本块
    mov r7, r1             ; 返回起始位置
    sub r3, r1
    add r3, 3              ; 包含结束指令
    mov r6, r3             ; 返回块大小
    
find_block_done:
    pop r5
    pop r4
    pop r3
    pop r2
    pop r1
    ret

; 辅助函数：生成基本块
; 输出：
;   r7 = 生成的基本块大小
generate_basic_block:
    ; TODO: 实现基本块生成
    mov r7, 0
    ret

exit:
    hlt 