; 数据变异策略测试
section .data
    ; 变异策略常量
    MUTATE_DATA_RANDOM: equ 1      ; 随机值变异
    MUTATE_DATA_PATTERN: equ 2     ; 模式变异
    MUTATE_DATA_SEMANTIC: equ 3    ; 语义变异
    
    ; 测试数据段
    test_data:
        ; 常量数据
        dq 1234567890              ; 整数
        dq 3.14159                 ; 浮点数
        db "Hello, World!", 0      ; 字符串
        db 0xFF, 0xFF, 0xFF, 0xFF  ; 二进制数据
    test_data_size: equ $ - test_data
    
    ; 数据类型信息
    data_types:
        db 1                       ; 整数类型
        db 2                       ; 浮点类型
        db 3                       ; 字符串类型
        db 4                       ; 二进制类型
    
    ; 变异结果存储
    mutation_results: times 3 dq 0  ; 每种策略的结果

section .code
    ; 初始化
    mov r7, 0                      ; 成功计数
    mov r6, 0                      ; 当前策略索引

test_strategy_loop:
    ; 检查是否测试完所有策略
    cmp r6, 3
    je test_done
    
    ; 1. 复制测试数据到目标位置
    mov r1, [CODE_SEGMENT_START]
    add r1, r6
    mul r1, 100                    ; 每个测试间隔100字节
    
    ; 备份原始数据
    backup_code r1, test_data_size
    
    ; 写入测试数据
    write_code r1, test_data, test_data_size
    
    ; 2. 执行数据变异
    add r6, 1                      ; 策略类型从1开始
    push r6                        ; 保存策略类型
    call mutate_data
    pop r6                         ; 恢复策略类型
    sub r6, 1                      ; 恢复索引
    
    ; 3. 验证变异后的数据
    push r6
    call verify_data
    pop r6
    
    ; 4. 记录结果
    mov [mutation_results + r6*8], r7
    
    ; 5. 恢复原始数据
    restore_code r1
    
next_strategy:
    add r6, 1
    jmp test_strategy_loop
    
test_done:
    hlt                            ; 返回成功计数

; 数据变异函数
; 输入：
;   r1 = 数据地址
;   r6 = 策略类型
; 输出：
;   r7 = 成功标志
mutate_data:
    push r1
    push r2
    push r3
    push r4
    
    ; 根据策略类型选择变异方法
    cmp r6, MUTATE_DATA_RANDOM
    je mutate_data_random
    cmp r6, MUTATE_DATA_PATTERN
    je mutate_data_pattern
    cmp r6, MUTATE_DATA_SEMANTIC
    je mutate_data_semantic
    jmp mutate_data_failed

mutate_data_random:
    ; 随机字节变异
    mov r2, test_data_size        ; 数据大小
    
random_loop:
    cmp r2, 0
    je mutate_data_success
    
    ; 生成随机字节
    push r1
    push r2
    call get_random_byte
    pop r2
    pop r1
    
    ; 写入随机字节
    mov [r1], r7
    
    add r1, 1
    sub r2, 1
    jmp random_loop

mutate_data_pattern:
    ; 基于模式的变异
    mov r2, test_data_size        ; 数据大小
    mov r3, 0                     ; 模式索引
    
pattern_loop:
    cmp r2, 0
    je mutate_data_success
    
    ; 根据模式生成值
    mov r4, r3
    and r4, 0x03                  ; 4种模式循环
    
    cmp r4, 0
    je pattern_increment
    cmp r4, 1
    je pattern_decrement
    cmp r4, 2
    je pattern_alternate
    
    ; 默认：保持不变
    jmp pattern_next
    
pattern_increment:
    mov r4, [r1]
    add r4, 1
    mov [r1], r4
    jmp pattern_next
    
pattern_decrement:
    mov r4, [r1]
    sub r4, 1
    mov [r1], r4
    jmp pattern_next
    
pattern_alternate:
    mov r4, [r1]
    not r4
    mov [r1], r4
    
pattern_next:
    add r1, 1
    sub r2, 1
    add r3, 1
    jmp pattern_loop

mutate_data_semantic:
    ; 基于语义的变异
    mov r2, 0                     ; 当前偏移
    
semantic_loop:
    cmp r2, test_data_size
    je mutate_data_success
    
    ; 获取数据类型
    mov r3, data_types
    add r3, r2
    mov r3, [r3]                  ; r3 = 当前数据类型
    
    ; 根据类型进行变异
    cmp r3, 1
    je mutate_integer
    cmp r3, 2
    je mutate_float
    cmp r3, 3
    je mutate_string
    cmp r3, 4
    je mutate_binary
    
    ; 默认：移动到下一个字节
    add r1, 1
    add r2, 1
    jmp semantic_loop
    
mutate_integer:
    ; 整数变异：小幅度调整
    mov r4, [r1]
    push r1
    push r2
    call get_random_byte
    pop r2
    pop r1
    
    add r4, r7
    mov [r1], r4
    
    add r1, 8                     ; 移动到下一个整数
    add r2, 8
    jmp semantic_loop
    
mutate_float:
    ; 浮点数变异：保持在合理范围
    mov r4, [r1]
    push r1
    push r2
    call get_random_byte
    pop r2
    pop r1
    
    and r7, 0x0F                  ; 限制变化幅度
    add r4, r7
    mov [r1], r4
    
    add r1, 8                     ; 移动到下一个浮点数
    add r2, 8
    jmp semantic_loop
    
mutate_string:
    ; 字符串变异：保持可打印字符
    mov r4, [r1]
    push r1
    push r2
    call get_random_byte
    pop r2
    pop r1
    
    and r7, 0x7F                  ; ASCII范围
    add r7, 32                    ; 可打印字符范围
    mov [r1], r7
    
    add r1, 1
    add r2, 1
    jmp semantic_loop
    
mutate_binary:
    ; 二进制数据变异：位翻转
    mov r4, [r1]
    push r1
    push r2
    call get_random_bit
    pop r2
    pop r1
    
    xor r4, r7
    mov [r1], r4
    
    add r1, 1
    add r2, 1
    jmp semantic_loop

mutate_data_success:
    mov r7, 1
    jmp mutate_data_done
    
mutate_data_failed:
    mov r7, 0
    
mutate_data_done:
    pop r4
    pop r3
    pop r2
    pop r1
    ret

; 数据验证函数
; 输入：
;   r1 = 数据地址
; 输出：
;   r7 = 验证结果
verify_data:
    push r1
    push r2
    push r3
    
    mov r7, 1                     ; 假设验证成功
    mov r2, 0                     ; 当前偏移
    
verify_loop:
    cmp r2, test_data_size
    je verify_done
    
    ; 获取数据类型
    mov r3, data_types
    add r3, r2
    mov r3, [r3]                  ; r3 = 当前数据类型
    
    ; 根据类型验证
    cmp r3, 1
    je verify_integer
    cmp r3, 2
    je verify_float
    cmp r3, 3
    je verify_string
    cmp r3, 4
    je verify_binary
    
    ; 默认：移动到下一个字节
    add r1, 1
    add r2, 1
    jmp verify_loop
    
verify_integer:
    ; 验证整数范围
    mov r3, [r1]
    cmp r3, 0
    jl verify_failed              ; 不允许负数
    
    add r1, 8
    add r2, 8
    jmp verify_loop
    
verify_float:
    ; 验证浮点数范围
    mov r3, [r1]
    ; TODO: 实现浮点数验证
    
    add r1, 8
    add r2, 8
    jmp verify_loop
    
verify_string:
    ; 验证字符串字符
    mov r3, [r1]
    cmp r3, 32                    ; 小于空格
    jl verify_failed
    cmp r3, 127                   ; 大于DEL
    jg verify_failed
    
    add r1, 1
    add r2, 1
    jmp verify_loop
    
verify_binary:
    ; 验证二进制数据
    ; 二进制数据没有特殊限制
    add r1, 1
    add r2, 1
    jmp verify_loop
    
verify_failed:
    mov r7, 0
    
verify_done:
    pop r3
    pop r2
    pop r1
    ret 