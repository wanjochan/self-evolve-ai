; 稳定性检查测试
section .data
    ; 稳定性测试类型
    STAB_MEMORY_LEAK: equ 1       ; 内存泄漏测试
    STAB_ERROR_HANDLE: equ 2      ; 错误处理测试
    STAB_RESOURCE_USE: equ 3      ; 资源使用测试
    STAB_LONG_RUN: equ 4          ; 长时间运行测试
    
    ; 测试参数
    TEST_DURATION: equ 1000       ; 测试持续时间
    MEMORY_BLOCK_SIZE: equ 1024   ; 内存块大小
    ERROR_TEST_COUNT: equ 100     ; 错误测试次数
    
    ; 测试代码模板
    test_code:
        ; 内存分配和释放测试
        mov r1, MEMORY_BLOCK_SIZE
        syscall 1                 ; 分配内存
        mov r2, r7                ; 保存内存地址
        mov r3, r1                ; 保存大小
        
        ; 写入测试数据
        mov r4, 0                 ; 偏移
    write_loop:
        cmp r4, r3
        jge write_done
        mov [r2+r4], r4          ; 写入数据
        add r4, 1
        jmp write_loop
    write_done:
        
        ; 验证数据
        mov r4, 0                 ; 偏移
    verify_loop:
        cmp r4, r3
        jge verify_done
        mov r5, [r2+r4]          ; 读取数据
        cmp r5, r4               ; 验证数据
        jne memory_error
        add r4, 1
        jmp verify_loop
    verify_done:
        
        ; 释放内存
        syscall 2                 ; 释放内存
        hlt
        
    memory_error:
        mov r7, 1                ; 错误标志
        hlt
    test_code_size: equ $ - test_code
    
    ; 错误注入代码
    error_code:
        ; 非法内存访问
        mov r1, 0
        mov [r1], r1             ; 应该触发错误
        
        ; 除零错误
        mov r1, 0
        div r1, r1               ; 应该触发错误
        
        ; 非法指令
        db 0xFF, 0xFF, 0xFF      ; 非法操作码
        
        hlt
    error_code_size: equ $ - error_code
    
    ; 资源监控数据
    resource_stats:
        dq 0                     ; 内存使用峰值
        dq 0                     ; CPU使用率
        dq 0                     ; 错误计数
        dq 0                     ; 运行时间
    
    ; 测试结果存储
    stability_results: times 4 dq 0

section .code
    ; 初始化
    mov r7, 0                    ; 总测试计数
    mov r6, 0                    ; 当前测试类型

test_loop:
    ; 检查是否完成所有测试
    cmp r6, 4
    je test_done
    
    ; 根据测试类型执行不同的测试
    add r6, 1                    ; 测试类型从1开始
    
    cmp r6, STAB_MEMORY_LEAK
    je test_memory_leak
    cmp r6, STAB_ERROR_HANDLE
    je test_error_handle
    cmp r6, STAB_RESOURCE_USE
    je test_resource_use
    cmp r6, STAB_LONG_RUN
    je test_long_run
    
    jmp next_test

test_memory_leak:
    ; 重置内存统计
    mov [resource_stats], 0
    
    ; 执行多次内存分配/释放
    mov r1, TEST_DURATION
    mov r2, 0                    ; 当前迭代
    
memory_leak_loop:
    cmp r2, r1
    je memory_leak_done
    
    ; 分配内存
    mov r3, MEMORY_BLOCK_SIZE
    syscall 1                    ; 分配内存
    mov r4, r7                   ; 保存地址
    
    ; 使用内存
    mov r5, 0
memory_use_loop:
    cmp r5, r3
    je memory_use_done
    mov [r4+r5], r5
    add r5, 1
    jmp memory_use_loop
memory_use_done:
    
    ; 释放内存
    mov r7, r4
    syscall 2                    ; 释放内存
    
    ; 检查内存使用
    syscall 3                    ; 获取内存使用
    mov r4, [resource_stats]
    cmp r7, r4
    jle skip_peak_update
    mov [resource_stats], r7     ; 更新峰值
skip_peak_update:
    
    add r2, 1
    jmp memory_leak_loop
    
memory_leak_done:
    ; 检查最终内存使用
    syscall 3                    ; 获取内存使用
    cmp r7, 0
    je memory_leak_success
    
    ; 内存泄漏
    mov [stability_results], 0
    jmp next_test
    
memory_leak_success:
    mov [stability_results], 1
    jmp next_test

test_error_handle:
    ; 重置错误计数
    mov [resource_stats+16], 0
    
    ; 执行错误测试
    mov r1, ERROR_TEST_COUNT
    mov r2, 0                    ; 当前测试
    
error_test_loop:
    cmp r2, r1
    je error_test_done
    
    ; 准备错误代码
    mov r3, [CODE_SEGMENT_START]
    add r3, r2
    mul r3, 100                  ; 间隔
    write_code r3, error_code, error_code_size
    
    ; 设置错误处理器
    mov [ERROR_HANDLER], error_handler
    
    ; 执行错误代码
    push r1
    push r2
    jmp r3
error_handler:
    ; 错误处理返回点
    pop r2
    pop r1
    
    ; 记录错误
    mov r4, [resource_stats+16]
    add r4, 1
    mov [resource_stats+16], r4
    
    add r2, 1
    jmp error_test_loop
    
error_test_done:
    ; 验证错误处理
    mov r1, [resource_stats+16]
    cmp r1, ERROR_TEST_COUNT
    je error_handle_success
    
    ; 错误处理失败
    mov [stability_results+8], 0
    jmp next_test
    
error_handle_success:
    mov [stability_results+8], 1
    jmp next_test

test_resource_use:
    ; 重置资源统计
    mov [resource_stats+8], 0    ; CPU使用率
    
    ; 执行资源密集型操作
    mov r1, TEST_DURATION
    mov r2, 0                    ; 当前迭代
    
resource_loop:
    cmp r2, r1
    je resource_done
    
    ; CPU密集计算
    mov r3, 1000
    mov r4, 1
cpu_loop:
    cmp r3, 0
    je cpu_done
    mul r4, r3
    div r4, 2
    sub r3, 1
    jmp cpu_loop
cpu_done:
    
    ; 检查CPU使用率
    syscall 4                    ; 获取CPU使用率
    mov r3, [resource_stats+8]
    add r3, r7
    mov [resource_stats+8], r3
    
    add r2, 1
    jmp resource_loop
    
resource_done:
    ; 计算平均CPU使用率
    mov r1, [resource_stats+8]
    mov r2, TEST_DURATION
    div r1, r2
    mov [resource_stats+8], r1
    
    ; 验证资源使用
    cmp r1, 90                   ; CPU使用率阈值
    jg resource_use_fail
    
    mov [stability_results+16], 1
    jmp next_test
    
resource_use_fail:
    mov [stability_results+16], 0
    jmp next_test

test_long_run:
    ; 重置运行时间
    mov [resource_stats+24], 0
    
    ; 准备长时间运行代码
    mov r1, [CODE_SEGMENT_START]
    add r1, 3000                 ; 测试位置
    write_code r1, test_code, test_code_size
    
    ; 执行长时间测试
    mov r2, TEST_DURATION
    mov r3, 0                    ; 当前迭代
    
long_run_loop:
    cmp r3, r2
    je long_run_done
    
    ; 执行测试代码
    push r1
    push r2
    push r3
    jmp r1
    pop r3
    pop r2
    pop r1
    
    ; 检查运行时间
    mov r4, [TIME_COUNT]
    mov [resource_stats+24], r4
    
    add r3, 1
    jmp long_run_loop
    
long_run_done:
    ; 验证长时间运行
    mov r1, [resource_stats+24]
    cmp r1, 0
    je long_run_fail
    
    mov [stability_results+24], 1
    jmp next_test
    
long_run_fail:
    mov [stability_results+24], 0

next_test:
    add r7, 1                    ; 增加测试计数
    jmp test_loop

test_done:
    ; 计算总体稳定性分数
    mov r1, 0                    ; 结果索引
    mov r2, 0                    ; 总分
    
score_loop:
    cmp r1, 32                   ; 4个结果 * 8字节
    je score_done
    
    mov r3, [stability_results+r1]
    add r2, r3
    
    add r1, 8
    jmp score_loop
    
score_done:
    ; 返回稳定性分数
    mov r7, r2
    hlt 