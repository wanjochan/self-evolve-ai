=head1 NAME

tcc - Tiny C Compiler

=head1 SYNOPSIS

usage: tcc [options] [I<infile1> I<infile2>...] [B<-run> I<infile> I<args>...]

=head1 DESCRIPTION

TCC options are very much like gcc options. The main difference is that TCC
can also execute directly the resulting program and give it runtime
arguments.

Here are some examples to understand the logic:


=over 4


=item C<B<tcc -run a.c>>

Compile F<a.c> and execute it directly


=item C<B<tcc -run a.c arg1>>

Compile a.c and execute it directly. arg1 is given as first argument to
the C<main()> of a.c.


=item C<B<tcc a.c -run b.c arg1>>

Compile F<a.c> and F<b.c>, link them together and execute them. arg1 is given
as first argument to the C<main()> of the resulting program. 


=item C<B<tcc -o myprog a.c b.c>>

Compile F<a.c> and F<b.c>, link them and generate the executable F<myprog>.


=item C<B<tcc -o myprog a.o b.o>>

link F<a.o> and F<b.o> together and generate the executable F<myprog>.


=item C<B<tcc -c a.c>>

Compile F<a.c> and generate object file F<a.o>.


=item C<B<tcc -c asmfile.S>>

Preprocess with C preprocess and assemble F<asmfile.S> and generate
object file F<asmfile.o>.


=item C<B<tcc -c asmfile.s>>

Assemble (but not preprocess) F<asmfile.s> and generate object file
F<asmfile.o>.


=item C<B<tcc -r -o ab.o a.c b.c>>

Compile F<a.c> and F<b.c>, link them together and generate the object file F<ab.o>.


=back


Scripting:

TCC can be invoked from I<scripts>, just as shell scripts. You just
need to add C<#!/usr/local/bin/tcc -run> at the start of your C source:

	
	#!/usr/local/bin/tcc -run
	#include <stdio.h>
	
	int main() 
	{
	    printf("Hello World\n");
	    return 0;
	}


TCC can read C source code from I<standard input> when B<-> is used in 
place of B<infile>. Example:

	
	echo 'main(){puts("hello");}' | tcc -run -


=head1 OPTIONS


=over 4


=item B<-c>

Generate an object file.


=item B<-o outfile>

Put object file, executable, or dll into output file F<outfile>.


=item B<-run source [args...]>

Compile file I<source> and run it with the command line arguments
I<args>. In order to be able to give more than one argument to a
script, several TCC options can be given I<after> the
B<-run> option, separated by spaces:
	
	tcc "-run -L/usr/X11R6/lib -lX11" ex4.c

In a script, it gives the following header:
	
	#!/usr/local/bin/tcc -run -L/usr/X11R6/lib -lX11



=item B<-v>

Display TCC version.


=item B<-vv>

Show included files.  As sole argument, print search dirs.  -vvv shows tries too.


=item B<-bench>

Display compilation statistics.


=back


Preprocessor options:


=over 4


=item B<-Idir>

Specify an additional include path. Include paths are searched in the
order they are specified.

System include paths are always searched after. The default system
include paths are: F</usr/local/include>, F</usr/include>
and F<PREFIX/lib/tcc/include>. (F<PREFIX> is usually
F</usr> or F</usr/local>).


=item B<-isystem dir>

Specify a system include path to be added to the defaults.


=item B<-nostdinc>

Do not search the default system include paths; only search include paths
provided on the command line.


=item B<-include file>

Include B<file> above each input file.


=item B<-Dsym[=val]>

Define preprocessor symbol B<sym> to
val. If val is not present, its value is B<1>. Function-like macros can
also be defined: B<-DF(a)=a+1>


=item B<-Usym>

Undefine preprocessor symbol B<sym>.


=item B<-E>

Preprocess only, to stdout or file (with -o).


=item B<-P>

Do not output C<#line> directives.


=item B<-P1>

Output alternative C<#line> directives.


=item B<-dD, -dM>

Output C<#define> directives.


=item B<-Wp,-opt>

Same as B<-opt>.


=back


Compilation flags:

Note: each of the following options has a negative form beginning with
B<-fno->.


=over 4


=item B<-funsigned-char>

Let the C<char> type be unsigned.


=item B<-fsigned-char>

Let the C<char> type be signed.


=item B<-fno-common>

Do not generate common symbols for uninitialized data.


=item B<-fleading-underscore>

Add a leading underscore at the beginning of each C symbol.


=item B<-fms-extensions>

Allow a MS C compiler extensions to the language. Currently this
assumes a nested named structure declaration without an identifier
behaves like an unnamed one.


=item B<-fdollars-in-identifiers>

Allow dollar signs in identifiers


=item B<-freverse-funcargs>

Evaluate function arguments right to left.


=item B<-fgnu89-inline>

C<extern inline> is like C<static inline>.


=item B<-fasynchronous-unwind-tables>

Create eh_frame section [on]


=item B<-ftest-coverage>

Create code coverage code. After running the resulting code an executable.tcov
or sofile.tcov file is generated with code coverage.


=back


Warning options:


=over 4


=item B<-w>

Disable all warnings.


=back


Note: each of the following warning options has a negative form beginning with
B<-Wno->.


=over 4


=item B<-Wimplicit-function-declaration>

Warn about implicit function declaration (missing prototype).


=item B<-Wdiscarded-qualifiers>

Warn when const is dropped.


=item B<-Wunsupported>

Warn about unsupported GCC features that are ignored by TCC.


=item B<-Wwrite-strings>

Make string constants be of type C<const char *> instead of C<char
*>.


=item B<-Werror>

Abort compilation if a warning is issued. Can be given an option to enable
the specified warning and turn it into an error, for example
B<-Werror=unsupported>.


=item B<-Wall> 

Activate some useful warnings (B<-Wimplicit-function-declaration>,
B<-Wdiscard-qualifiers>).


=back


Linker options:


=over 4


=item B<-Ldir>

Specify an additional static library path for the B<-l> option. The
default library paths are F</usr/local/lib>, F</usr/lib> and F</lib>.


=item B<-lxxx>

Link your program with dynamic library libxxx.so or static library
libxxx.a. The library is searched in the paths specified by the
B<-L> option and B<LIBRARY_PATH> variable.


=item B<-Bdir>

Set the path where the tcc internal libraries (and include files) can be
found (default is F<PREFIX/lib/tcc>).


=item B<-shared>

Generate a shared library instead of an executable.


=item B<-soname name>

set name for shared library to be used at runtime


=item B<-static>

Generate a statically linked executable (default is a shared linked
executable).


=item B<-rdynamic>

Export global symbols to the dynamic linker. It is useful when a library
opened with C<dlopen()> needs to access executable symbols.


=item B<-r>

Generate an object file combining all input files.


=item B<-nostdlib>

Don't implicitly link with libc, the C runtime files, and libtcc1.


=item B<-Wl,-nostdlib>

Don't search the default paths for libraries (F</usr/local/lib>,
F</usr/lib> and F</lib>). Only the paths specified with B<-L>
and B<LIBRARY_PATH> are searched.


=item B<-Wl,-rpath=path>

Put custom search path for dynamic libraries into executable.


=item B<-Wl,-Ipath>


=item B<-Wl,--dynamic-linker=path>

Set the ELF interpreter (dynamic linker). This defaults to the value of the
environment variable B<LD_SO> if set, or a compiled-in default.


=item B<-Wl,--enable-new-dtags>

When putting a custom search path for dynamic libraries into the executable,
create the new ELF dynamic tag DT_RUNPATH instead of the old legacy DT_RPATH.


=item B<-Wl,--oformat=fmt>

Use I<fmt> as output format. The supported output formats are:

=over 4


=item C<elf32-i386>

ELF output format (default)

=item C<binary>

Binary image (only for executable output)

=item C<coff>

COFF output format (only for executable output for TMS320C67xx target)

=back



=item B<-Wl,--export-all-symbols>


=item B<-Wl,--export-dynamic>

Export global symbols to the dynamic linker. It is useful when a library
opened with C<dlopen()> needs to access executable symbols.


=item B<-Wl,-subsystem=console/gui/wince/...>

Set type for PE (Windows) executables.


=item B<-Wl,-[Ttext=# | section-alignment=# | file-alignment=# | image-base=# | stack=#]>

Modify executable layout.


=item B<-Wl,-Bsymbolic>

Set DT_SYMBOLIC tag.


=item B<-Wl,-(no-)whole-archive>

Turn on/off linking of all objects in archives.


=back


Debugger options:


=over 4


=item B<-g>

Generate run time stab debug information so that you get clear run time
error messages: C< test.c:68: in function 'test5()': dereferencing
invalid pointer> instead of the laconic C<Segmentation
fault>.


=item B<-gdwarf[-x]>

Generate run time dwarf debug information instead of stab debug information.


=item B<-b>

Generate additional support code to check memory allocations and array/pointer
bounds. B<-g> is implied.


=item B<-bt[N]>

Display N callers in stack traces. This is useful with B<-g> or B<-b>.
When activated, C<__TCC_BACKTRACE__> is defined.

With executables, additional support for stack traces is included. A function
    C< int tcc_backtrace(const char *fmt, ...); >
is provided to trigger a stack trace with a message on demand.


=back


Misc options:


=over 4



=item B<-std=version>

Define C<__STDC_VERSION__>: C<201112> if B<version> is c11 or
gnu11; C<199901> otherwise.


=item B<-x[c|a|b|n]>

Specify content of next input file: respectively C, assembly, binary, or none.


=item B<-O[n]>

Same as B<-D__OPTIMIZE__> except for -O0.


=item B<-pthread>

Preprocess with B<-D_REENTRANT>, link with B<-lpthread>.


=item B<-M>

Just output makefile fragment with dependencies


=item B<-MM>

Like -M except mention only user header files, not system header files.


=item B<-MD>

Generate makefile fragment with dependencies.


=item B<-MMD>

Like -MD except mention only user header files, not system header files.


=item B<-MF depfile>

Use F<depfile> as output for -MD.


=item B<-MP>

Mention all dependencies as targets too.


=item B<-print-search-dirs>

Print the configured installation directory and a list of library
and include directories tcc will search.


=item B<-dumpversion>

Print version.


=item B<-dt>

With B<-run>/B<-E>: auto-define 'test_...' macros


=back


Target specific options:


=over 4


=item B<-mms-bitfields>

Use an algorithm for bitfield alignment consistent with MSVC. Default is
gcc's algorithm.


=item B<-mfloat-abi (ARM only)>

Select the float ABI. Possible values: C<softfp> and C<hard>


=item B<-mno-sse>

Do not use sse registers on x86_64


=item B<-m32, -m64>

Pass command line to the i386/x86_64 cross compiler.


=back


Note: GCC options B<-fx> and B<-mx> are ignored.

=head1 ENVIRONMENT

Environment variables that affect how tcc operates.


=over 4



=item B<CPATH>


=item B<C_INCLUDE_PATH>

A colon-separated list of directories searched for include files,
directories given with B<-I> are searched first.


=item B<LIBRARY_PATH>

A colon-separated list of directories searched for libraries for the
B<-l> option, directories given with B<-L> are searched first.


=back



=head1 SEE ALSO

cpp(1),
gcc(1)

=head1 AUTHOR

Fabrice Bellard

