# TASM Loader v1 - First Generation Self-Hosted Loader
# 设计理念：最小化实现，专注于核心加载功能

.section .data
    # 常量定义
    .const TASM_MAGIC "TASM"    # 魔数
    .const VERSION_MAJOR 1      # 主版本号
    .const VERSION_MINOR 0      # 次版本号
    
    # Windows内存管理常量
    .const MEM_COMMIT 0x1000
    .const MEM_RESERVE 0x2000
    .const MEM_RELEASE 0x8000
    .const PAGE_EXECUTE_READWRITE 0x40
    
    # Unix内存管理常量
    .const PROT_READ 0x1
    .const PROT_WRITE 0x2
    .const PROT_EXEC 0x4
    .const MAP_PRIVATE 0x2
    .const MAP_ANONYMOUS 0x20

    # 错误消息
    .const ERR_ALLOC "内存分配失败"
    .const ERR_FREE "内存释放失败"
    .const ERR_COPY "内存复制失败"
    
    # Windows DLL和函数名
    .const KERNEL32_DLL "kernel32.dll"
    .const VIRTUAL_ALLOC "VirtualAlloc"
    .const VIRTUAL_FREE "VirtualFree"
    .const GET_CURRENT_PROCESS "GetCurrentProcess"
    .const FLUSH_INSTRUCTION_CACHE "FlushInstructionCache"
    
    # 文件操作常量
    .const GENERIC_READ 0x80000000
    .const GENERIC_WRITE 0x40000000
    .const FILE_SHARE_READ 0x00000001
    .const FILE_SHARE_WRITE 0x00000002
    .const OPEN_EXISTING 3
    .const FILE_ATTRIBUTE_NORMAL 0x80
    
    # Unix文件操作常量
    .const O_RDONLY 0
    .const O_WRONLY 1
    .const O_RDWR 2
    
    # 错误消息
    .const ERR_FILE_OPEN "文件打开失败"
    .const ERR_FILE_READ "文件读取失败"
    .const ERR_FILE_WRITE "文件写入失败"
    .const ERR_FILE_CLOSE "文件关闭失败"
    
    # Windows DLL和函数名
    .const CREATE_FILE "CreateFileA"
    .const READ_FILE "ReadFile"
    .const WRITE_FILE "WriteFile"
    .const CLOSE_HANDLE "CloseHandle"
    .const GET_FILE_SIZE "GetFileSize"
    
    # 系统信息
    .data os_type 1            # 0 = Unix, 1 = Windows
    .data kernel32_handle 0    # kernel32.dll句柄
    .data VirtualAlloc 0       # VirtualAlloc函数指针
    .data VirtualFree 0        # VirtualFree函数指针
    .data GetCurrentProcess 0  # GetCurrentProcess函数指针
    .data FlushInstructionCache 0  # FlushInstructionCache函数指针
    .data CreateFile 0        # CreateFile函数指针
    .data ReadFile 0          # ReadFile函数指针
    .data WriteFile 0         # WriteFile函数指针
    .data CloseHandle 0       # CloseHandle函数指针
    .data GetFileSize 0       # GetFileSize函数指针

    # TASM文件格式常量
    .const TASM_HEADER_SIZE 16
    .const SECTION_ENTRY_SIZE 16
    
    # 错误消息
    .const ERR_INVALID_MAGIC "无效的文件魔数"
    .const ERR_INVALID_VERSION "不支持的文件版本"
    .const ERR_INVALID_SECTIONS "无效的段表"
    .const ERR_FILE_TOO_SMALL "文件太小"

    # 命令行参数
    .data argc 0               # 参数数量
    .data argv 0              # 参数数组指针
    
    # 缓冲区
    .bss file_buffer 0x100000  # 1MB文件缓冲区
    
    # 错误消息
    .const ERR_USAGE "用法: loader1 <program.tasm>"
    .const ERR_LOAD "加载失败"
    .const ERR_EXECUTE "执行失败"

.section .text
    # 入口点
    .global _start
    _start:
        # 保存参数
        push rbp
        mov rbp, rsp
        
        mov [argc], rdi        # 保存参数数量
        mov [argv], rsi        # 保存参数数组指针
        
        # 检查参数
        cmp qword [argc], 2
        jl _start_usage
        
        # 初始化系统
        call init_system
        test rax, rax
        jnz _start_error
        
        # 加载程序
        mov rdi, [argv]        # 获取参数数组
        mov rdi, [rdi+8]       # 获取第一个参数（程序路径）
        call load_program
        test rax, rax
        jnz _start_error
        
        # 正常退出
        xor rax, rax
        leave
        ret
        
    _start_usage:
        # 输出用法信息
        lea rdi, [ERR_USAGE]
        call print_error
        mov rax, 1
        leave
        ret
        
    _start_error:
        # 输出错误信息
        lea rdi, [ERR_LOAD]
        call print_error
        mov rax, 1
        leave
        ret

    # 系统初始化
    init_system:
        push rbp
        mov rbp, rsp
        
        # 检测操作系统
        call detect_os
        mov [os_type], rax
        
        # 如果是Windows，加载必要的DLL函数
        cmp rax, 1
        jne init_system_done
        
        # 加载kernel32.dll
        lea rcx, [KERNEL32_DLL]
        call LoadLibraryA
        test rax, rax
        jz init_system_error
        mov [kernel32_handle], rax
        
        # 获取VirtualAlloc
        mov rcx, rax
        lea rdx, [VIRTUAL_ALLOC]
        call GetProcAddress
        test rax, rax
        jz init_system_error
        mov [VirtualAlloc], rax
        
        # 获取VirtualFree
        mov rcx, [kernel32_handle]
        lea rdx, [VIRTUAL_FREE]
        call GetProcAddress
        test rax, rax
        jz init_system_error
        mov [VirtualFree], rax
        
        # 获取GetCurrentProcess
        mov rcx, [kernel32_handle]
        lea rdx, [GET_CURRENT_PROCESS]
        call GetProcAddress
        test rax, rax
        jz init_system_error
        mov [GetCurrentProcess], rax
        
        # 获取FlushInstructionCache
        mov rcx, [kernel32_handle]
        lea rdx, [FLUSH_INSTRUCTION_CACHE]
        call GetProcAddress
        test rax, rax
        jz init_system_error
        mov [FlushInstructionCache], rax
        
        # 获取文件操作函数
        mov rcx, [kernel32_handle]
        lea rdx, [CREATE_FILE]
        call GetProcAddress
        test rax, rax
        jz init_system_error
        mov [CreateFile], rax
        
        mov rcx, [kernel32_handle]
        lea rdx, [READ_FILE]
        call GetProcAddress
        test rax, rax
        jz init_system_error
        mov [ReadFile], rax
        
        mov rcx, [kernel32_handle]
        lea rdx, [WRITE_FILE]
        call GetProcAddress
        test rax, rax
        jz init_system_error
        mov [WriteFile], rax
        
        mov rcx, [kernel32_handle]
        lea rdx, [CLOSE_HANDLE]
        call GetProcAddress
        test rax, rax
        jz init_system_error
        mov [CloseHandle], rax
        
        mov rcx, [kernel32_handle]
        lea rdx, [GET_FILE_SIZE]
        call GetProcAddress
        test rax, rax
        jz init_system_error
        mov [GetFileSize], rax
        
    init_system_done:
        xor rax, rax
        leave
        ret
        
    init_system_error:
        mov rax, 1
        leave
        ret

    # 操作系统检测
    detect_os:
        # 输出: rax = 1表示Windows，0表示Unix
        push rbp
        mov rbp, rsp
        
        # 尝试调用Windows特有的系统调用
        mov rax, 0x60           # Windows NtQuerySystemInformation
        xor rcx, rcx
        xor rdx, rdx
        xor r8, r8
        xor r9, r9
        
        # 如果系统调用成功或返回特定错误码，说明是Windows
        test rax, rax
        jns detect_os_windows
        cmp rax, 0xC0000001    # STATUS_UNSUCCESSFUL
        je detect_os_windows
        cmp rax, 0xC0000002    # STATUS_NOT_IMPLEMENTED
        je detect_os_windows
        
        # 默认为Unix
        xor rax, rax
        leave
        ret
        
    detect_os_windows:
        mov rax, 1
        leave
        ret

    # 内存管理函数
    .global mem_alloc
    mem_alloc:
        # 输入: rdi = size
        # 输出: rax = 地址，如果失败则为0
        
        push rbp
        mov rbp, rsp
        
        # 检查操作系统类型
        mov rax, [os_type]
        cmp rax, 1              # 1 = Windows
        je mem_alloc_windows
        jmp mem_alloc_unix
        
    mem_alloc_windows:
        # Windows VirtualAlloc
        sub rsp, 32             # 为系统调用预留栈空间
        
        xor rcx, rcx           # lpAddress = NULL
        mov rdx, rdi           # dwSize
        mov r8, MEM_COMMIT     # flAllocationType
        or r8, MEM_RESERVE
        mov r9, PAGE_EXECUTE_READWRITE  # flProtect
        
        call [VirtualAlloc]
        
        leave
        ret
        
    mem_alloc_unix:
        # Unix mmap
        xor rdi, rdi           # addr = NULL
        mov rsi, rdi           # size
        mov rdx, PROT_READ     # prot
        or rdx, PROT_WRITE
        or rdx, PROT_EXEC
        mov r10, MAP_PRIVATE   # flags
        or r10, MAP_ANONYMOUS
        mov r8, -1             # fd
        xor r9, r9             # offset
        
        mov rax, 9             # mmap syscall
        syscall
        
        cmp rax, -1
        je mem_alloc_error
        
        leave
        ret
        
    mem_alloc_error:
        xor rax, rax           # 返回NULL表示失败
        leave
        ret

    .global mem_free
    mem_free:
        # 输入: rdi = addr, rsi = size
        # 输出: rax = 0表示成功，非0表示失败
        
        push rbp
        mov rbp, rsp
        
        # 检查操作系统类型
        mov rax, [os_type]
        cmp rax, 1              # 1 = Windows
        je mem_free_windows
        jmp mem_free_unix
        
    mem_free_windows:
        # Windows VirtualFree
        sub rsp, 32             # 为系统调用预留栈空间
        
        mov rcx, rdi           # lpAddress
        xor rdx, rdx           # dwSize = 0
        mov r8, MEM_RELEASE    # dwFreeType
        
        call [VirtualFree]
        
        test rax, rax
        jz mem_free_error
        
        xor rax, rax           # 返回0表示成功
        leave
        ret
        
    mem_free_unix:
        # Unix munmap
        mov rax, 11            # munmap syscall
        syscall
        
        test rax, rax
        jnz mem_free_error
        
        xor rax, rax           # 返回0表示成功
        leave
        ret
        
    mem_free_error:
        mov rax, 1             # 返回非0表示失败
        leave
        ret

    .global mem_copy
    mem_copy:
        # 输入: rdi = dst, rsi = src, rdx = size
        # 输出: rax = 0表示成功，非0表示失败
        
        push rbp
        mov rbp, rsp
        
        # 使用rep movsb指令复制内存
        mov rcx, rdx           # 设置计数器
        cld                    # 清除方向标志
        rep movsb             # 执行复制
        
        # 检查是否需要刷新指令缓存（Windows）
        mov rax, [os_type]
        cmp rax, 1             # 1 = Windows
        jne mem_copy_done
        
        # Windows FlushInstructionCache
        sub rsp, 32            # 为系统调用预留栈空间
        
        call [GetCurrentProcess]
        mov rcx, rax          # hProcess
        mov rdx, rdi          # lpBaseAddress
        mov r8, rdx           # dwSize
        
        call [FlushInstructionCache]
        
        test rax, rax
        jz mem_copy_error
        
    mem_copy_done:
        xor rax, rax          # 返回0表示成功
        leave
        ret
        
    mem_copy_error:
        mov rax, 1            # 返回非0表示失败
        leave
        ret

    # 文件操作函数
    .global file_open
    file_open:
        # 输入: rdi = 文件名指针
        # 输出: rax = 文件句柄，如果失败则为-1
        
        push rbp
        mov rbp, rsp
        
        # 检查操作系统类型
        mov rax, [os_type]
        cmp rax, 1              # 1 = Windows
        je file_open_windows
        jmp file_open_unix
        
    file_open_windows:
        # Windows CreateFile
        sub rsp, 32             # 为系统调用预留栈空间
        
        mov rcx, rdi           # lpFileName
        mov rdx, GENERIC_READ  # dwDesiredAccess
        mov r8, FILE_SHARE_READ # dwShareMode
        xor r9, r9             # lpSecurityAttributes = NULL
        push OPEN_EXISTING     # dwCreationDisposition
        push FILE_ATTRIBUTE_NORMAL # dwFlagsAndAttributes
        push 0                 # hTemplateFile = NULL
        
        call [CreateFile]
        
        add rsp, 24            # 恢复栈
        
        cmp rax, -1            # INVALID_HANDLE_VALUE
        je file_open_error
        
        leave
        ret
        
    file_open_unix:
        # Unix open
        mov rax, 2             # open syscall
        mov rsi, O_RDONLY      # flags
        xor rdx, rdx           # mode
        syscall
        
        cmp rax, -1
        je file_open_error
        
        leave
        ret
        
    file_open_error:
        mov rax, -1
        leave
        ret

    .global file_close
    file_close:
        # 输入: rdi = 文件句柄
        # 输出: rax = 0表示成功，非0表示失败
        
        push rbp
        mov rbp, rsp
        
        # 检查操作系统类型
        mov rax, [os_type]
        cmp rax, 1              # 1 = Windows
        je file_close_windows
        jmp file_close_unix
        
    file_close_windows:
        # Windows CloseHandle
        mov rcx, rdi           # hObject
        call [CloseHandle]
        
        test rax, rax
        jz file_close_error
        
        xor rax, rax
        leave
        ret
        
    file_close_unix:
        # Unix close
        mov rax, 3             # close syscall
        syscall
        
        test rax, rax
        jnz file_close_error
        
        xor rax, rax
        leave
        ret
        
    file_close_error:
        mov rax, 1
        leave
        ret

    .global file_read
    file_read:
        # 输入: rdi = 文件句柄, rsi = 缓冲区指针, rdx = 读取大小
        # 输出: rax = 实际读取的字节数，如果失败则为-1
        
        push rbp
        mov rbp, rsp
        
        # 检查操作系统类型
        mov rax, [os_type]
        cmp rax, 1              # 1 = Windows
        je file_read_windows
        jmp file_read_unix
        
    file_read_windows:
        # Windows ReadFile
        sub rsp, 40             # 为系统调用预留栈空间
        
        mov rcx, rdi           # hFile
        mov rdx, rsi           # lpBuffer
        mov r8, rdx            # nNumberOfBytesToRead
        lea r9, [rsp+32]       # lpNumberOfBytesRead
        push 0                 # lpOverlapped = NULL
        
        call [ReadFile]
        
        add rsp, 8             # 恢复栈
        
        test rax, rax
        jz file_read_error
        
        mov rax, [rsp+32]      # 返回实际读取的字节数
        leave
        ret
        
    file_read_unix:
        # Unix read
        mov rax, 0             # read syscall
        syscall
        
        cmp rax, -1
        je file_read_error
        
        leave
        ret
        
    file_read_error:
        mov rax, -1
        leave
        ret

    .global file_size
    file_size:
        # 输入: rdi = 文件句柄
        # 输出: rax = 文件大小，如果失败则为-1
        
        push rbp
        mov rbp, rsp
        
        # 检查操作系统类型
        mov rax, [os_type]
        cmp rax, 1              # 1 = Windows
        je file_size_windows
        jmp file_size_unix
        
    file_size_windows:
        # Windows GetFileSize
        mov rcx, rdi           # hFile
        xor rdx, rdx           # lpFileSizeHigh = NULL
        
        call [GetFileSize]
        
        cmp rax, -1            # INVALID_FILE_SIZE
        je file_size_error
        
        leave
        ret
        
    file_size_unix:
        # Unix fstat
        sub rsp, 144           # 为stat结构体预留空间
        
        mov rax, 5             # fstat syscall
        mov rsi, rsp           # stat buffer
        syscall
        
        test rax, rax
        jnz file_size_error
        
        mov rax, [rsp+48]      # st_size offset
        
        add rsp, 144
        leave
        ret
        
    file_size_error:
        mov rax, -1
        leave
        ret

    .global verify_tasm
    verify_tasm:
        # 输入: rdi = 文件数据指针, rsi = 文件大小
        # 输出: rax = 0表示验证通过，非0表示失败
        
        push rbp
        mov rbp, rsp
        
        # 检查文件大小
        cmp rsi, TASM_HEADER_SIZE
        jl verify_tasm_too_small
        
        # 验证魔数 "TASM"
        mov eax, [rdi]
        cmp eax, 0x4D534154    # "TASM" in little endian
        jne verify_tasm_invalid_magic
        
        # 验证版本
        movzx eax, byte [rdi+4]  # 主版本号
        cmp al, VERSION_MAJOR
        jne verify_tasm_invalid_version
        
        movzx eax, byte [rdi+5]  # 次版本号
        cmp al, VERSION_MINOR
        jne verify_tasm_invalid_version
        
        # 验证段表
        mov eax, [rdi+12]        # 段数量
        test eax, eax            # 至少要有一个段
        jz verify_tasm_invalid_sections
        
        # 计算所需的总大小
        mov ecx, SECTION_ENTRY_SIZE
        mul ecx                  # eax = 段表大小
        add eax, TASM_HEADER_SIZE # eax = 需要的最小文件大小
        
        cmp rsi, rax            # 比较实际文件大小
        jl verify_tasm_invalid_sections
        
        # 验证通过
        xor rax, rax
        leave
        ret
        
    verify_tasm_too_small:
        mov rax, 1
        leave
        ret
        
    verify_tasm_invalid_magic:
        mov rax, 2
        leave
        ret
        
    verify_tasm_invalid_version:
        mov rax, 3
        leave
        ret
        
    verify_tasm_invalid_sections:
        mov rax, 4
        leave
        ret

    .global get_tasm_info
    get_tasm_info:
        # 输入: rdi = 文件数据指针
        # 输出: rax = 段数量
        #       rdx = 代码段偏移
        #       rcx = 代码段大小
        
        push rbp
        mov rbp, rsp
        
        # 获取段数量
        mov eax, [rdi+12]
        
        # 初始化段表扫描
        lea rsi, [rdi+TASM_HEADER_SIZE]  # 段表起始位置
        xor rcx, rcx                    # 段表索引
        
    get_tasm_info_loop:
        # 检查是否是代码段
        cmp dword [rsi], 0x544558542E  # ".text" in little endian
        je get_tasm_info_found_text
        
        # 移动到下一个段表项
        add rsi, SECTION_ENTRY_SIZE
        inc rcx
        cmp rcx, rax
        jl get_tasm_info_loop
        
        # 没找到代码段
        xor rdx, rdx
        xor rcx, rcx
        leave
        ret
        
    get_tasm_info_found_text:
        # 获取代码段信息
        mov edx, [rsi+8]     # 段偏移
        mov ecx, [rsi+12]    # 段大小
        
        leave
        ret 

    # 程序加载
    load_program:
        # 输入: rdi = 程序文件路径
        # 输出: rax = 0表示成功，非0表示失败
        
        push rbp
        mov rbp, rsp
        
        # 保存文件路径
        push rdi
        
        # 打开文件
        call file_open
        cmp rax, -1
        je load_program_error
        
        # 保存文件句柄
        push rax
        
        # 获取文件大小
        mov rdi, rax
        call file_size
        cmp rax, -1
        je load_program_close
        
        # 保存文件大小
        push rax
        
        # 读取文件内容
        mov rdi, [rsp+8]      # 文件句柄
        lea rsi, [file_buffer]
        mov rdx, rax          # 文件大小
        call file_read
        cmp rax, -1
        je load_program_close
        
        # 验证TASM格式
        lea rdi, [file_buffer]
        mov rsi, rax          # 实际读取的大小
        call verify_tasm
        test rax, rax
        jnz load_program_close
        
        # 获取程序信息
        lea rdi, [file_buffer]
        call get_tasm_info
        
        # 保存程序信息
        push rax              # 段数量
        push rdx              # 代码段偏移
        push rcx              # 代码段大小
        
        # 分配内存
        mov rdi, rcx          # 代码段大小
        call mem_alloc
        test rax, rax
        jz load_program_close
        
        # 保存内存地址
        push rax
        
        # 复制代码段
        mov rdi, rax          # 目标地址
        lea rsi, [file_buffer]
        add rsi, rdx          # 源地址 = 缓冲区 + 代码段偏移
        mov rdx, rcx          # 复制大小
        call mem_copy
        test rax, rax
        jnz load_program_free
        
        # 执行程序
        mov rdi, [rsp]        # 程序入口地址
        call execute_program
        
        # 释放内存
        mov rdi, [rsp]        # 内存地址
        mov rsi, [rsp+8]      # 内存大小
        call mem_free
        
        # 关闭文件
        mov rdi, [rsp+24]     # 文件句柄
        call file_close
        
        # 恢复栈并返回
        add rsp, 40           # 清理栈上的临时变量
        xor rax, rax
        leave
        ret
        
    load_program_free:
        # 释放内存
        mov rdi, [rsp]        # 内存地址
        mov rsi, [rsp+8]      # 内存大小
        call mem_free
        
    load_program_close:
        # 关闭文件
        mov rdi, [rsp+24]     # 文件句柄
        call file_close
        
    load_program_error:
        # 恢复栈并返回错误
        add rsp, 40           # 清理栈上的临时变量
        mov rax, 1
        leave
        ret

    # 程序执行
    execute_program:
        # 输入: rdi = 程序入口地址
        # 输出: rax = 程序返回值
        
        push rbp
        mov rbp, rsp
        
        # 调用程序入口点
        call rdi
        
        leave
        ret

    # 错误输出
    print_error:
        # 输入: rdi = 错误消息字符串指针
        # 输出: 无
        
        push rbp
        mov rbp, rsp
        
        # 计算字符串长度
        mov rsi, rdi
        xor rcx, rcx
        not rcx
        xor al, al
        repne scasb
        not rcx
        dec rcx
        
        # 输出错误消息
        mov rdx, rcx          # 长度
        mov rsi, rdi          # 缓冲区
        mov rdi, 2            # stderr
        mov rax, 1            # write syscall
        syscall
        
        leave
        ret 