# PE节表测试
# 测试不同类型的节的创建和访问

.section .data
    # 测试数据
    test_data1: db "Test Data Section", 0
    test_data2: times 1024 db 0xAA
    align 16
    test_ptr: dq test_data1

.section .rdata
    # 只读数据测试
    const_str1: db "Read Only Data", 0
    const_data: dd 0x12345678, 0x87654321
    align 8
    const_ptr: dq const_str1

.section .bss
    # 未初始化数据测试
    buffer1: resb 2048
    align 16
    buffer2: resq 256

.section .text
    global _start
    extern ExitProcess
    extern WriteFile
    extern GetStdHandle

_start:
    # 保存栈帧
    push rbp
    mov rbp, rsp
    sub rsp, 32
    
    # 获取标准输出句柄
    mov ecx, -11        ; STD_OUTPUT_HANDLE
    call GetStdHandle
    mov rbx, rax        ; 保存句柄
    
    # 测试访问.data节
    lea rcx, [test_data1]
    call test_write
    
    # 测试访问.rdata节
    lea rcx, [const_str1]
    call test_write
    
    # 测试访问.bss节
    lea rcx, [buffer1]
    mov byte [rcx], 'B'
    mov byte [rcx+1], 'S'
    mov byte [rcx+2], 'S'
    mov byte [rcx+3], 0
    call test_write
    
    # 测试成功
    xor eax, eax
    jmp .exit
    
test_write:
    # 计算字符串长度
    push rcx
    xor rdx, rdx
.strlen_loop:
    cmp byte [rcx+rdx], 0
    je .strlen_done
    inc rdx
    jmp .strlen_loop
.strlen_done:
    
    # 调用WriteFile
    pop rcx         ; 字符串地址
    push rdx        ; 保存长度
    sub rsp, 32     ; 影子空间
    
    mov r8, rdx     ; 长度
    mov rdx, rcx    ; 缓冲区
    mov rcx, rbx    ; 文件句柄
    xor r9, r9      ; lpOverlapped = NULL
    lea r9, [rsp+24]; lpNumberOfBytesWritten
    call WriteFile
    
    add rsp, 32     ; 恢复栈
    pop rdx
    ret

.exit:
    call ExitProcess 