# 词法分析器错误恢复测试
# 本文件用于测试词法分析器的错误恢复能力
# 包含多个错误，但应该能够继续分析后续内容

.section .data
    # 测试数据 - 包含错误但可恢复
    test_string1: db "未闭合的字符串
    valid_data1: db "这是有效的字符串", 0  # 应该能正确识别
    
    # 非法标识符后的有效标识符
    123illegal_id: db 0
    valid_id1: db 0  # 应该能正确识别
    
    # 非法数值后的有效数值
    illegal_hex: dd 0xGH
    valid_hex: dd 0xFF  # 应该能正确识别
    
    # 未闭合的多行注释后的有效数据
    /* 这是一个未闭合的多行注释
    valid_data2: db "注释后的有效数据", 0  # 应该能正确识别

.section .text
    global _start
    extern ExitProcess

_start:
    # 非法指令后的有效指令
    movv rax, rbx
    mov rax, rbx  # 应该能正确识别
    
    # 非法寄存器后的有效寄存器
    mov raxw, 1
    mov rax, 1  # 应该能正确识别
    
    # 非法操作数后的有效操作数
    mov rax, [rbx + 2**4]
    mov rax, [rbx + 4]  # 应该能正确识别
    
    # 连续多个错误后的有效指令
    mov123 rax#, [rbx + 2**4]
    mov rax, [rbx]  # 应该能正确识别
    
    # 未完成的指令后的有效指令
    mov    rax,    
    mov rax, 1  # 应该能正确识别
    
    # 错误的标点符号后的有效指令
    mov rax;rbx
    mov rax, rbx  # 应该能正确识别
    
    # 混合多种错误后的有效代码块
    mov raxw, [rbx + 2**4] /* 未闭合的注释
    # 以下是有效代码块
    push rbp
    mov rbp, rsp
    sub rsp, 16
    
    # 测试错误后的标签定义
    invalid:label:
    valid_label:  # 应该能正确识别
        mov rax, 0
    
    # 测试错误后的段定义
    .section invalid
    .section .bss  # 应该能正确识别
    
    # 如果能成功识别所有有效部分
    # 说明词法分析器具有良好的错误恢复能力
    xor eax, eax  # 返回0表示成功
    call ExitProcess
