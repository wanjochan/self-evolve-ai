; 功能验证测试
section .data
    ; 测试用例类型
    TEST_ARITHMETIC: equ 1         ; 算术运算测试
    TEST_CONTROL: equ 2           ; 控制流测试
    TEST_MEMORY: equ 3            ; 内存操作测试
    TEST_MUTATION: equ 4          ; 变异操作测试
    
    ; 测试数据
    test_cases:
        ; 算术测试用例
        dq 10, 20                 ; 加法测试
        dq 50, 30                 ; 减法测试
        dq 5, 6                   ; 乘法测试
        dq 100, 4                 ; 除法测试
        
        ; 控制流测试用例
        dq 1, 1                   ; 相等比较
        dq 5, 3                   ; 大于比较
        dq 2, 8                   ; 小于比较
        
        ; 内存测试用例
        dq 0xDEADBEEF             ; 写入测试
        dq 0x12345678             ; 读取测试
        
        ; 变异测试用例
        db 0x01, 0x01, 0x0A      ; 原始指令
        db 0x10, 0x01, 0x02      ; 目标指令
    
    ; 测试结果存储
    test_results: times 4 dq 0    ; 每种测试类型的结果
    
    ; 错误计数器
    error_count: dq 0

section .code
    ; 初始化
    mov r7, 0                     ; 总测试计数
    mov r6, 0                     ; 当前测试类型

test_loop:
    ; 检查是否完成所有测试
    cmp r6, 4
    je test_done
    
    ; 根据测试类型执行不同的测试
    add r6, 1                     ; 测试类型从1开始
    
    cmp r6, TEST_ARITHMETIC
    je run_arithmetic_tests
    cmp r6, TEST_CONTROL
    je run_control_tests
    cmp r6, TEST_MEMORY
    je run_memory_tests
    cmp r6, TEST_MUTATION
    je run_mutation_tests
    
    jmp next_test

run_arithmetic_tests:
    ; 测试加法
    mov r1, [test_cases]         ; 第一个操作数
    mov r2, [test_cases+8]       ; 第二个操作数
    add r1, r2
    cmp r1, 30                   ; 预期结果
    jne arithmetic_error
    
    ; 测试减法
    mov r1, [test_cases+16]
    mov r2, [test_cases+24]
    sub r1, r2
    cmp r1, 20
    jne arithmetic_error
    
    ; 测试乘法
    mov r1, [test_cases+32]
    mov r2, [test_cases+40]
    mul r1, r2
    cmp r1, 30
    jne arithmetic_error
    
    ; 测试除法
    mov r1, [test_cases+48]
    mov r2, [test_cases+56]
    div r1, r2
    cmp r1, 25
    jne arithmetic_error
    
    mov [test_results], 1        ; 记录成功
    jmp next_test
    
arithmetic_error:
    add [error_count], 1
    jmp next_test

run_control_tests:
    ; 测试相等比较
    mov r1, [test_cases+64]
    mov r2, [test_cases+72]
    cmp r1, r2
    jne control_error
    
    ; 测试大于比较
    mov r1, [test_cases+80]
    mov r2, [test_cases+88]
    cmp r1, r2
    jle control_error
    
    ; 测试小于比较
    mov r1, [test_cases+96]
    mov r2, [test_cases+104]
    cmp r1, r2
    jge control_error
    
    mov [test_results+8], 1      ; 记录成功
    jmp next_test
    
control_error:
    add [error_count], 1
    jmp next_test

run_memory_tests:
    ; 测试内存写入
    mov r1, [test_cases+112]
    mov [r2], r1                 ; 写入测试值
    mov r3, [r2]                 ; 读回测试值
    cmp r3, r1
    jne memory_error
    
    ; 测试内存读取
    mov r1, [test_cases+120]
    mov r2, [CODE_SEGMENT_START]
    add r2, 100                  ; 测试位置
    mov [r2], r1                 ; 写入测试值
    mov r3, [r2]                 ; 读取测试值
    cmp r3, r1
    jne memory_error
    
    mov [test_results+16], 1     ; 记录成功
    jmp next_test
    
memory_error:
    add [error_count], 1
    jmp next_test

run_mutation_tests:
    ; 准备测试代码
    mov r1, [CODE_SEGMENT_START]
    add r1, 200                  ; 测试位置
    
    ; 写入原始代码
    mov r2, test_cases
    add r2, 128                  ; 变异测试用例偏移
    write_code r1, r2, 6         ; 写入两条指令
    
    ; 执行变异
    mutate_code r1, 6, 1         ; 指令变异
    
    ; 验证变异后的代码
    verify_code r1, 6
    cmp r7, 0                    ; 检查验证结果
    je mutation_error
    
    mov [test_results+24], 1     ; 记录成功
    jmp next_test
    
mutation_error:
    add [error_count], 1

next_test:
    add r7, 1                    ; 增加测试计数
    jmp test_loop

test_done:
    ; 检查错误数量
    mov r1, [error_count]
    cmp r1, 0
    je all_tests_passed
    
    ; 有错误发生
    mov r7, 0
    hlt
    
all_tests_passed:
    mov r7, 1
    hlt 