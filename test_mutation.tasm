; 代码变异测试
section .data
    ; 变异类型常量
    MUTATE_TYPE_INSTRUCTION: equ 1  ; 指令变异
    MUTATE_TYPE_OPERAND: equ 2      ; 操作数变异
    MUTATE_TYPE_BLOCK: equ 3        ; 基本块变异
    
    ; 测试代码段
    test_code:
        ; 简单的计算程序
        db 0x01, 0x01, 0x0A        ; mov r1, 10
        db 0x01, 0x02, 0x14        ; mov r2, 20
        db 0x10, 0x01, 0x02        ; add r1, r2
        db 0x01, 0x03, 0x00        ; mov r3, 0
        db 0x30, 0x01, 0x02        ; cmp r1, r2
        db 0x41, 0x03, 0x00        ; je +3
        db 0x11, 0x01, 0x02        ; sub r1, r2
        db 0xFF                    ; hlt
    test_code_size: equ $ - test_code
    
    ; 变异结果存储
    mutation_results: times 3 dq 0   ; 每种变异类型的结果

section .code
    ; 初始化
    mov r7, 0                       ; 成功计数
    mov r6, 0                       ; 当前变异类型
    
test_mutation_loop:
    ; 检查是否测试完所有变异类型
    cmp r6, 3
    je test_done
    
    ; 1. 复制测试代码到目标位置
    mov r1, [CODE_SEGMENT_START]
    add r1, r6
    mul r1, 100                     ; 每个测试间隔100字节
    
    ; 备份原始代码
    backup_code r1, test_code_size
    
    ; 写入测试代码
    write_code r1, test_code, test_code_size
    
    ; 2. 执行变异
    add r6, 1                       ; 变异类型从1开始
    mutate_code r1, test_code_size, r6
    sub r6, 1                       ; 恢复索引
    
    ; 3. 验证变异后的代码
    verify_code r1, test_code_size
    
    ; 4. 执行变异后的代码
    push r6                         ; 保存变异类型索引
    push r1                         ; 保存代码地址
    jmp r1
    
    ; 5. 如果执行成功返回这里
    pop r1                          ; 恢复代码地址
    pop r6                          ; 恢复变异类型索引
    
    ; 6. 记录成功
    mov [mutation_results + r6*8], 1
    add r7, 1
    
    ; 7. 恢复原始代码
    restore_code r1
    
next_mutation:
    add r6, 1
    jmp test_mutation_loop
    
test_done:
    hlt                             ; 返回成功计数 