/**
 * c99_codegen.h - C99 Code Generator
 * 
 * AST to ASTC bytecode code generator for C99 compiler.
 * Converts parsed and analyzed C99 AST into executable ASTC bytecode.
 */

#ifndef C99_CODEGEN_H
#define C99_CODEGEN_H

#include "../frontend/c99_parser.h"
#include "../../core/astc.h"
#include <stdint.h>
#include <stdbool.h>

#ifdef __cplusplus
extern "C" {
#endif

// ===============================================
// Code Generation Context
// ===============================================

typedef struct {
    uint8_t* bytecode;              // Generated bytecode buffer
    size_t bytecode_size;           // Current bytecode size
    size_t bytecode_capacity;       // Bytecode buffer capacity
    
    // Code generation state
    int current_function_id;        // Current function ID
    int next_local_id;              // Next local variable ID
    int next_label_id;              // Next label ID
    
    // Stack management
    int stack_depth;                // Current stack depth
    int max_stack_depth;            // Maximum stack depth
    
    // Function table
    struct FunctionInfo* functions; // Function information table
    size_t function_count;          // Number of functions
    size_t function_capacity;       // Function table capacity
    
    // String literals
    char** string_literals;         // String literal table
    size_t string_count;            // Number of string literals
    size_t string_capacity;         // String table capacity
    
    // Error handling
    char error_message[512];
    bool has_error;
    int error_count;
    
    // Options
    int optimization_level;         // Optimization level (0-3)
    bool debug_info;                // Generate debug information
    bool bounds_checking;           // Enable bounds checking
} CodegenContext;

// ===============================================
// Function Information
// ===============================================

typedef struct FunctionInfo {
    char* name;                     // Function name
    int function_id;                // Function ID
    size_t local_count;             // Number of local variables
    size_t bytecode_offset;         // Function bytecode offset
    bool is_main;                   // Is main function
} FunctionInfo;

// ===============================================
// Code Generation Functions
// ===============================================

/**
 * Create code generation context
 */
CodegenContext* codegen_create(void);

/**
 * Destroy code generation context
 */
void codegen_destroy(CodegenContext* codegen);

/**
 * Generate ASTC bytecode from AST
 */
bool codegen_generate(CodegenContext* codegen, struct ASTNode* ast);

/**
 * Generate translation unit
 */
bool codegen_translation_unit(CodegenContext* codegen, struct ASTNode* ast);

/**
 * Generate function definition
 */
bool codegen_function_definition(CodegenContext* codegen, struct ASTNode* func);

/**
 * Generate global variable declaration
 */
bool codegen_global_variable_declaration(CodegenContext* codegen, struct ASTNode* var_decl);

/**
 * Generate statement
 */
bool codegen_statement(CodegenContext* codegen, struct ASTNode* stmt);

/**
 * Generate expression
 */
bool codegen_expression(CodegenContext* codegen, struct ASTNode* expr);

// ===============================================
// Bytecode Emission Functions
// ===============================================

/**
 * Emit single byte
 */
void codegen_emit_byte(CodegenContext* codegen, uint8_t byte);

/**
 * Emit 32-bit integer
 */
void codegen_emit_i32(CodegenContext* codegen, int32_t value);

/**
 * Emit instruction
 */
void codegen_emit_instruction(CodegenContext* codegen, int instruction);

/**
 * Emit instruction with operand
 */
void codegen_emit_instruction_i32(CodegenContext* codegen, int instruction, int32_t operand);

// ===============================================
// Function Management
// ===============================================

/**
 * Register function
 */
FunctionInfo* codegen_register_function(CodegenContext* codegen, const char* name);

/**
 * Find function by name
 */
FunctionInfo* codegen_find_function(CodegenContext* codegen, const char* name);

// ===============================================
// Stack Management
// ===============================================

/**
 * Push value to stack
 */
void codegen_push_stack(CodegenContext* codegen);

/**
 * Pop value from stack
 */
void codegen_pop_stack(CodegenContext* codegen);

// ===============================================
// Error Handling
// ===============================================

/**
 * Report code generation error
 */
void codegen_error(CodegenContext* codegen, struct ASTNode* node, const char* message);

/**
 * Check if codegen has error
 */
bool codegen_has_error(CodegenContext* codegen);

/**
 * Get error message
 */
const char* codegen_get_error(CodegenContext* codegen);

// ===============================================
// Output Functions
// ===============================================

/**
 * Get generated bytecode
 */
uint8_t* codegen_get_bytecode(CodegenContext* codegen, size_t* size);

/**
 * Write bytecode to file
 */
bool codegen_write_to_file(CodegenContext* codegen, const char* filename);

/**
 * Print code generation statistics
 */
void codegen_print_stats(CodegenContext* codegen);

// ===============================================
// Enhanced Statement Generation Functions
// ===============================================

/**
 * Generate compound statement
 */
bool codegen_compound_statement(CodegenContext* codegen, struct ASTNode* stmt);

/**
 * Generate return statement
 */
bool codegen_return_statement(CodegenContext* codegen, struct ASTNode* stmt);

/**
 * Generate expression statement
 */
bool codegen_expression_statement(CodegenContext* codegen, struct ASTNode* stmt);

/**
 * Generate if statement
 */
bool codegen_if_statement(CodegenContext* codegen, struct ASTNode* stmt);

/**
 * Generate while statement
 */
bool codegen_while_statement(CodegenContext* codegen, struct ASTNode* stmt);

/**
 * Generate for statement
 */
bool codegen_for_statement(CodegenContext* codegen, struct ASTNode* stmt);

// ===============================================
// Enhanced Expression Generation Functions
// ===============================================

/**
 * Generate constant expression
 */
bool codegen_constant_expression(CodegenContext* codegen, struct ASTNode* expr);

/**
 * Generate identifier expression
 */
bool codegen_identifier_expression(CodegenContext* codegen, struct ASTNode* expr);

/**
 * Generate binary operation
 */
bool codegen_binary_operation(CodegenContext* codegen, struct ASTNode* expr);

/**
 * Generate unary operation
 */
bool codegen_unary_operation(CodegenContext* codegen, struct ASTNode* expr);

/**
 * Generate function call expression
 */
bool codegen_call_expression(CodegenContext* codegen, struct ASTNode* expr);

#ifdef __cplusplus
}
#endif

#endif // C99_CODEGEN_H
