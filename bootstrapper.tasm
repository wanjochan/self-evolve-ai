; 自举加载程序
; 负责加载和启动自举编译器

%define STACK_SIZE 4096

section .data
    ; 编译器文件名
    compiler_file db "bootstrap_compiler.tasm", 0
    
    ; 加载地址
    load_addr equ 0x100000  ; 1MB 处加载
    
    ; 文件句柄
    file_handle dd 0
    
    ; 文件大小
    file_size dd 0
    
    ; 状态消息
    msg_loading db "Loading compiler...", 10, 0
    msg_loaded db "Compiler loaded successfully!", 10, 0
    msg_error db "Error loading compiler!", 10, 0

section .bss
    ; 栈空间
    stack_bottom resb STACK_SIZE
    stack_top equ $


section .text
    global _start
    
_start:
    ; 设置栈
    mov esp, stack_top
    
    ; 输出加载信息
    mov eax, 4
    mov ebx, 1
    mov ecx, msg_loading
    mov edx, msg_loaded - msg_loading
    int 0x80
    
    ; 1. 打开编译器文件
    mov eax, 5          ; sys_open
    mov ebx, compiler_file
    mov ecx, 0          ; O_RDONLY
    int 0x80
    
    cmp eax, 0
    jl .error
    
    mov [file_handle], eax
    
    ; 2. 获取文件大小
    mov eax, 19         ; sys_lseek
    mov ebx, [file_handle]
    mov ecx, 0          ; 偏移量
    mov edx, 2          ; SEEK_END
    int 0x80
    
    mov [file_size], eax
    
    ; 移动回文件开头
    mov eax, 19         ; sys_lseek
    mov ebx, [file_handle]
    mov ecx, 0          ; 偏移量
    mov edx, 0          ; SEEK_SET
    int 0x80
    
    ; 3. 读取文件内容
    mov eax, 3          ; sys_read
    mov ebx, [file_handle]
    mov ecx, load_addr  ; 读取到加载地址
    mov edx, [file_size]
    int 0x80
    
    cmp eax, 0
    jle .error
    
    ; 4. 关闭文件
    mov eax, 6          ; sys_close
    mov ebx, [file_handle]
    int 0x80
    
    ; 5. 验证文件头
    mov eax, [load_addr]
    cmp eax, 0x464C457F  ; ELF 魔数
    jne .error
    
    ; 6. 设置执行权限
    mov eax, 125        ; sys_mprotect
    mov ebx, load_addr
    mov ecx, [file_size]
    mov edx, 7          ; PROT_READ|PROT_WRITE|PROT_EXEC
    int 0x80
    
    cmp eax, 0
    jnz .error
    
    ; 7. 跳转到入口点
    mov eax, load_addr
    add eax, 0x18       ; e_entry 在 ELF 头中的偏移
    mov eax, [eax]      ; 获取入口点地址
    add eax, load_addr  ; 计算实际入口点
    
    ; 输出成功信息
    push eax
    mov eax, 4
    mov ebx, 1
    mov ecx, msg_loaded
    mov edx, msg_error - msg_loaded - 1
    int 0x80
    pop eax
    
    ; 跳转到编译器入口点
    jmp eax
    
.error:
    ; 输出错误信息并退出
    mov eax, 4
    mov ebx, 1
    mov ecx, msg_error
    mov edx, msg_loading - msg_error - 1
    int 0x80
    
    mov eax, 1
    mov ebx, 1
    int 0x80
